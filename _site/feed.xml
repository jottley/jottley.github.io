<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">I exist as I am</title>
<subtitle type="text">Do not go where the path may lead, go instead where there is no path and leave a trail. --Ralph Waldo Emerson</subtitle>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://jared.ottleys.net/feed.xml" />
<link rel="alternate" type="text/html" href="http://jared.ottleys.net" />
<updated>2014-02-15T21:13:37-07:00</updated>
<id>http://jared.ottleys.net/</id>
<author>
  <name>Jared Ottley</name>
  <uri>http://jared.ottleys.net/</uri>
  <email>jared@ottleys.net</email>
</author>


<entry>
  <title type="html"><![CDATA[Alfresco: Property Decorators &#8212; cont.]]></title>
  <link rel="alternate" type="text/html" href="http://jared.ottleys.net/alfresco/alfresco-property-decorators-cont" />
  <id>http://jared.ottleys.net/alfresco/alfresco-property-decorators-cont</id>
  <published>2012-04-02T00:00:00-06:00</published>
  <updated>2012-04-02T00:00:00-06:00</updated>
  <author>
    <name>Jared Ottley</name>
    <uri>http://jared.ottleys.net</uri>
    <email>jared@ottleys.net</email>
  </author>
  <content type="html">&lt;p&gt;In my post on &lt;a href=&quot;http://jared.ottleys.net/alfresco/alfresco-property-decorators&quot; title=&quot;Alfresco: Property Decorators&quot;&gt;Property Decorators&lt;/a&gt; I pointed out that there was an &lt;a href=&quot;https://issues.alfresco.com/jira/browse/ALF-13038&quot;&gt;issue&lt;/a&gt; adding a customer property decorator: you couldn’t create a custom bean to perform the mapping and had to overwrite the out of the box bean. Well &lt;a href=&quot;http://twitter.com/#!/mikehatfield&quot;&gt;Mike Hatfield&lt;/a&gt; has found a solution which is just awesome: &lt;a href=&quot;http://forum.springsource.org/showthread.php?53358-Simple-merge-of-util-map&quot;&gt;Map Merge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is possible to merge maps of a child bean to a parent bean. Here is how it is done: Create a new bean, where the parent is the &lt;code&gt;applicationScriptUtils&lt;/code&gt; bean. Add a single property of &lt;code&gt;decoratedProperties&lt;/code&gt; and define a map in the property. When you define the map add the attribute &lt;code&gt;merge=&quot;true&quot;&lt;/code&gt;. Finally, add your custom property to decorator bean mappings. Done!&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;customApplicationScriptUtils&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;parent=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;applicationScriptUtils&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;decoratedProperties&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;map&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;merge=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;entry&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;alf:propertyHolder&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bean=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;customDecoratorBean&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/map&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


  &lt;p&gt;&lt;a href=&quot;http://jared.ottleys.net/alfresco/alfresco-property-decorators-cont&quot;&gt;Alfresco: Property Decorators &#8212; cont.&lt;/a&gt; was originally published by Jared Ottley at &lt;a href=&quot;http://jared.ottleys.net&quot;&gt;I exist as I am&lt;/a&gt; on April 02, 2012.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Alfresco: Simple Workflow Web Scripts]]></title>
  <link rel="alternate" type="text/html" href="http://jared.ottleys.net/alfresco/alfresco-simple-workflow-web-scripts" />
  <id>http://jared.ottleys.net/alfresco/alfresco-simple-workflow-web-scripts</id>
  <published>2012-04-01T00:00:00-06:00</published>
  <updated>2012-04-01T00:00:00-06:00</updated>
  <author>
    <name>Jared Ottley</name>
    <uri>http://jared.ottleys.net</uri>
    <email>jared@ottleys.net</email>
  </author>
  <content type="html">&lt;p&gt;Continuing on from my previous post on &lt;a href=&quot;http://jared.ottleys.net/alfresco/alfresco-simple-workflow&quot; title=&quot;Alfresco: Simple Workflow&quot;&gt;Simple Workflows&lt;/a&gt; let’s look at using the Simple Workflow model in a few web scripts.&lt;/p&gt;

&lt;p&gt;The first web script will add a simple workflow to a node. The second will allow us to signal the transition of accept or reject on that node.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add a Workflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As discussed in the previous post, a simple workflow is made up of two paths: accept or reject with a copy or move to another folder. You are also able to set the name presented to the user for the accept or reject step. This is very useful as what we may be presenting to the user is to not accept or reject documents, but rather sending the document to two different group owned folders based on context/content of those documents. At least one step is required. Alfresco defaults “accept” for the required step and makes “reject” the optional step. These need to be passed to our web script. The payload is passed as json. A full example of this looks as follows:&lt;/p&gt;

&lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&gt;{
    &quot;simpleworkflow&quot;: {
        &quot;accept&quot;: {
            &quot;name&quot;: &quot;acceptstep&quot;,
            &quot;move&quot;: true,
            &quot;folder&quot;: &quot;workspace://SpacesStore/ebd7ff99-b423-4e45-ad4f-71929ce4c089&quot;
        },
        &quot;reject&quot;: {
            &quot;name&quot;: &quot;rejectstep&quot;,
            &quot;move&quot;: true,
            &quot;folder&quot;: &quot;workspace://SpacesStore/0239b2ed-ebfa-4b9d-a7fa-f0404448cffc&quot;
        }
    }
}
&lt;/pre&gt;

&lt;p&gt;In the above example, the reject object is optional.&lt;/p&gt;

&lt;p&gt;Both the accept and reject objects are made up of the three required values of the simple workflow aspect: name, move and folder.&lt;/p&gt;

&lt;p&gt;The name field maps to either approveStep or rejectStep. It is the name presented in the Alfresco UIs. But it could also be used in a custom interface as they are returned as part of the list of properties for the node.&lt;/p&gt;

&lt;p&gt;The move field maps to either approveMove or rejectMove. This boolean field indicates with a true value to move the node or, if false, to copy the node.&lt;/p&gt;

&lt;p&gt;The final field, folder, maps to approveFolder or rejectFolder. This is the folder node where the document should be moved or copied to when the appropriate action is taken.&lt;/p&gt;

&lt;p&gt;The web script can be call by passing the simpleworkflow json object to &lt;code&gt;simpleworkflow/add/{store_type}/{store_id}/{id}&lt;/code&gt;. Upon completion a json object of &lt;code&gt;{ &quot;success&quot;: true|false] }&lt;/code&gt;. True upon successful completion, false if there was an error adding the simpleworkflow aspect to the node.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using a Simple Workflow from a Web Script&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This web script was originally developed for a customer to return XML, but I’ve now updated it to return json by default. The XML is maintained here for backwards compatibility.&lt;/p&gt;

&lt;p&gt;When a simple workflow aspect is added to a node, it just adds the properties of what should occur when an accept or reject action is taken. The actual actions of what happens is built into UIs. So the web scripts need to do the same: perform the copy or move to the targeted folder. The call is pretty simple: &lt;code&gt;simpleworkflow/{accept|reject}/{store_type}/{store_id}/{id}&lt;/code&gt;. The json or XML that is returned let us know of either the success or the failure of this action. Failures can provide some information on why the failure occurred. A success messages, provides more detail: what action occured — copy or move, which step was taken — returning the name as set in the approveStep or rejectStep properties, the folder that document was moved or copied to. The destination that is returned is the human readable path. (If there is any interest we can update this to return the nodeRef as well as the path.)&lt;/p&gt;

&lt;p&gt;The json returned looks like:&lt;/p&gt;

&lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&gt;{
    &quot;success&quot;: true,
    &quot;action&quot;: &quot;move&quot;,
    &quot;step&quot;: &quot;acceptStep&quot;,
    &quot;destination&quot;: &quot;/Company Home/Sites/workflow/docmentLibrary/workflow/accept&quot;
}
&lt;/pre&gt;

&lt;p&gt;These web scripts can be &lt;a href=&quot;http://code.google.com/p/alfresco-simple-workflow-webscripts/&quot;&gt;downloaded&lt;/a&gt; from its Google Code Project.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://jared.ottleys.net/alfresco/alfresco-simple-workflow-web-scripts&quot;&gt;Alfresco: Simple Workflow Web Scripts&lt;/a&gt; was originally published by Jared Ottley at &lt;a href=&quot;http://jared.ottleys.net&quot;&gt;I exist as I am&lt;/a&gt; on April 01, 2012.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Alfresco: Simple Workflow]]></title>
  <link rel="alternate" type="text/html" href="http://jared.ottleys.net/alfresco/alfresco-simple-workflow" />
  <id>http://jared.ottleys.net/alfresco/alfresco-simple-workflow</id>
  <published>2012-03-31T00:00:00-06:00</published>
  <updated>2012-03-31T00:00:00-06:00</updated>
  <author>
    <name>Jared Ottley</name>
    <uri>http://jared.ottleys.net</uri>
    <email>jared@ottleys.net</email>
  </author>
  <content type="html">&lt;p&gt;When I worked on the sales side at Alfresco, one of the easiest things to demo was a simple workflow. It was usually something that enabled the prospect to tick off a major requirement on their long list of things that the solution they were looking for needed. Alfresco has two kinds of workflow: simple and for lack of a better word advanced. Advanced workflows usually require some level of business logic, multiple steps, several actors, etc. Advanced workflows are implemented using &lt;a href=&quot;http://www.activiti.org/&quot;&gt;Activiti&lt;/a&gt; (Alfresco 4.0 forward) or JBPM (pre Alfresco 4.0 and maintained for legacy in Alfresco 4.0) Simple workflows provide an accept, a reject, and then the content is either copied or moved to another folder.&lt;/p&gt;

&lt;p&gt;What I really like about simple workflows is how they are implemented and how you can model your own customizations or applications using this pattern. As a follow up to this post I’m going to share a web script to add a simple workflow to a node and then another to progress the workflow by accepting or rejecting it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s dig in!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Simple workflows present, as stated above, the ability to accept and reject the document and then copy or move that document to another space. The key to a simple workflow is the model.&lt;/p&gt;

&lt;pre class=&quot;brush: xml; title: ; notranslate&quot; title=&quot;&quot;&gt;&amp;lt;aspect name=&quot;app:simpleworkflow&quot;&amp;gt;
         &amp;lt;parent&amp;gt;app:workflow&amp;lt;/parent&amp;gt;
         &amp;lt;properties&amp;gt;
            &amp;lt;property name=&quot;app:approveStep&quot;&amp;gt;
               &amp;lt;type&amp;gt;d:text&amp;lt;/type&amp;gt;
               &amp;lt;protected&amp;gt;true&amp;lt;/protected&amp;gt;
            &amp;lt;/property&amp;gt;
            &amp;lt;property name=&quot;app:approveFolder&quot;&amp;gt;
               &amp;lt;type&amp;gt;d:noderef&amp;lt;/type&amp;gt;
               &amp;lt;protected&amp;gt;true&amp;lt;/protected&amp;gt;
            &amp;lt;/property&amp;gt;
            &amp;lt;property name=&quot;app:approveMove&quot;&amp;gt;
               &amp;lt;type&amp;gt;d:boolean&amp;lt;/type&amp;gt;
            &amp;lt;/property&amp;gt;
            &amp;lt;property name=&quot;app:rejectStep&quot;&amp;gt;
               &amp;lt;type&amp;gt;d:text&amp;lt;/type&amp;gt;
               &amp;lt;protected&amp;gt;true&amp;lt;/protected&amp;gt;
            &amp;lt;/property&amp;gt;
            &amp;lt;property name=&quot;app:rejectFolder&quot;&amp;gt;
               &amp;lt;type&amp;gt;d:noderef&amp;lt;/type&amp;gt;
               &amp;lt;protected&amp;gt;true&amp;lt;/protected&amp;gt;
            &amp;lt;/property&amp;gt;
            &amp;lt;property name=&quot;app:rejectMove&quot;&amp;gt;
               &amp;lt;type&amp;gt;d:boolean&amp;lt;/type&amp;gt;
            &amp;lt;/property&amp;gt;
         &amp;lt;/properties&amp;gt;
      &amp;lt;/aspect&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Each node that has a simple workflow attached to it has this aspect applied to it, which specifies through properties what steps are available, what that step should be called (acceptStep and rejectStep) and then what should occur when that step is taken: should it be moved or copied (acceptMove and rejectMove)? and where it should go (acceptFolder and rejectFolder).&lt;/p&gt;

&lt;p&gt;Knowing this opens many doors for us. Because the steps are properties on the node, we can modify them, if needs be, using either javascript or Java. We can also build on top of this. When I worked on the Consulting team at Alfresco a customer wanted to have a three step workflow: accept, reject and other. Modeling this was simple. All we really needed to do was add three simple properties: the step name (text), the destination node (noderef) and if it is a move or copy (boolean). A bit more complex was adding the logic for exposing this through the Explorer UI. (This customer had not yet moved to Share). Because we did not want to affect all of the simple workflows already in place, we opted to add an additional 3 step simple workflow, giving them the ability to have up to 5 different paths that could be taken for a single node.&lt;/p&gt;

&lt;p&gt;We can also tie simple workflows into more complex actions: dynamically adding simple workflows or scripting more complex actions that allow users to manually take the workflow steps but also allowing programatic lifecycle or state to take simple workflow actions. By jumping out of Explorer or Share and into a custom application you can expose simple workflows from the repository through a web script (an easier task than modifying JSF) and one that I’ve used for several different Alfresco implementations. We will cover that in my next post.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://jared.ottleys.net/alfresco/alfresco-simple-workflow&quot;&gt;Alfresco: Simple Workflow&lt;/a&gt; was originally published by Jared Ottley at &lt;a href=&quot;http://jared.ottleys.net&quot;&gt;I exist as I am&lt;/a&gt; on March 31, 2012.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Alfresco: Scheduled Jobs]]></title>
  <link rel="alternate" type="text/html" href="http://jared.ottleys.net/alfresco/alfresco-scheduled-jobs" />
  <id>http://jared.ottleys.net/alfresco/alfresco-scheduled-jobs</id>
  <published>2012-02-21T00:00:00-07:00</published>
  <updated>2012-02-21T00:00:00-07:00</updated>
  <author>
    <name>Jared Ottley</name>
    <uri>http://jared.ottleys.net</uri>
    <email>jared@ottleys.net</email>
  </author>
  <content type="html">&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;@tommoz has pointed out to me a blog post that I’d never seen before from @Ixxus which is a &lt;a href=&quot;http://t.co/RAOFy23l&quot;&gt;complete example of writing a scheduled job&lt;/a&gt; (spring beans and all). You should really check out their excellent example if you need a full example of writing scheduled jobs for Alfresco.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of the things that is easy to forget when adding/writing a new scheduled jobs is to wrap your code in a RetryingTransactionHelper _and_ a RunAs. When executing the scheduled job we need to make sure that we provide a transaction in which to perform your custom code and a user to perform the code under.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre class=&quot;brush: java; title: ; notranslate&quot; title=&quot;&quot;&gt;public void execute()
    {
        AuthenticationUtil.runAs(new AuthenticationUtil.RunAsWork&amp;lt;Object&amp;gt;()
        {
            @Override
            public Object doWork()
                throws Exception
            {
                RetryingTransactionCallback&amp;lt;;Object&amp;gt;; txnWork = new RetryingTransactionCallback&amp;lt;Object&amp;gt;()
                {
                    public Object execute()
                        throws Exception
                    {
                        //Add logic here
                        return null;
                    }
                };

                transactionService.getRetryingTransactionHelper().doInTransaction(txnWork, false);
                return null;
            }
        }, user_authority);

    }
&lt;/pre&gt;

&lt;p&gt;Hopefully this template will prove usefully to anyone writing a custom scheduled actions.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://jared.ottleys.net/alfresco/alfresco-scheduled-jobs&quot;&gt;Alfresco: Scheduled Jobs&lt;/a&gt; was originally published by Jared Ottley at &lt;a href=&quot;http://jared.ottleys.net&quot;&gt;I exist as I am&lt;/a&gt; on February 21, 2012.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Alfresco: Property Decorators]]></title>
  <link rel="alternate" type="text/html" href="http://jared.ottleys.net/alfresco/alfresco-property-decorators" />
  <id>http://jared.ottleys.net/alfresco/alfresco-property-decorators</id>
  <published>2012-02-15T00:00:00-07:00</published>
  <updated>2012-02-15T00:00:00-07:00</updated>
  <author>
    <name>Jared Ottley</name>
    <uri>http://jared.ottleys.net</uri>
    <email>jared@ottleys.net</email>
  </author>
  <content type="html">&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;em&gt;After fighting through some upgrade issues with MySQL…and it still not being 100% fixed…I’m finally at a point where I can comfortably write to the DB and bring to you two, thats right two!, new posts in quick succession.  I’m hoping to make this a trend to have two new posts a month (so look for 4 this month as these two should have gone live last month). So without further ado….&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of the exciting, at least in my opinion, new features of Alfresco 4 is the &lt;a href=&quot;http://blogs.alfresco.com/wp/mikeh/2011/09/26/share-document-library-extensions-in-v4-0/&quot;&gt;Share Document Library Extension’s&lt;/a&gt; (hat tip to &lt;a href=&quot;https://twitter.com/#!/mikehatfield&quot;&gt;Mike Hatfield)&lt;/a&gt;.  In the above post Mike goes in to detail on how to use this new feature and I’m going to share an example on how I’m using it as part of integration with Dropbox I’m working on.&lt;/p&gt;

&lt;h3 id=&quot;the-problem-set&quot;&gt;&lt;strong&gt;The Problem Set&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;As part of the integration we need to add a status indicator (see the &lt;a href=&quot;http://blogs.alfresco.com/wp/mikeh/2011/09/26/share-document-library-extensions-in-v4-0/&quot;&gt;above article &lt;/a&gt;for in depth details on status indicators) to, as the name states, indicate that the file/folder is in a specific state, ie synced to Dropbox.  Early on this was a simple tasks: does it have a specific aspect or not.  As the project has moved forward, we’ve raised the complexity: does it have a specific association and does that association have a child association of a specific value…a direct correlation between this child association and a specific user.  Now that we have moved beyond what the out of the box evaluators can do directly, what are our options?&lt;/p&gt;

&lt;h3 id=&quot;options&quot;&gt;Options?&lt;/h3&gt;

&lt;p&gt;The Share Document Library Extension Framework provides two options for retrieving additional metadata/values from the repository tier: Custom Responses and Property Decorators.&lt;/p&gt;

&lt;p&gt;Custom Responses allow you to return information that is not specific to any node.  Alfresco 4 uses this to return information about our Sharepoint Protocol integration.&lt;/p&gt;

&lt;p&gt;Property Decorators allow you to return node specific information in a more usable format to the web tier (ie Share).  For example rewriting a nodeRef to a filename, or a username as first and last name. Or as in our case, a new set of properties or key/value pairs.&lt;/p&gt;

&lt;p&gt;Since we are looking for specific information about a node, a property decorator is what we will need.&lt;/p&gt;

&lt;h3 id=&quot;implemention&quot;&gt;Implemention&lt;/h3&gt;

&lt;p&gt;A property decorator needs to have the following:&lt;/p&gt;

&lt;p&gt;A content model property to hold a map of properties. In our model we added a property similar to:&lt;/p&gt;

&lt;pre class=&quot;brush: xml; title: ; notranslate&quot; title=&quot;&quot;&gt;&amp;lt;property name=&quot;alf:propertyHolder&quot;&amp;gt;
    &amp;lt;type&amp;gt;d:boolean&amp;lt;/type&amp;gt;
    &amp;lt;default&amp;gt;false&amp;lt;/default&amp;gt;
    &amp;lt;index enabled=&quot;false&quot;/&amp;gt;
&amp;lt;/property&amp;gt;
&lt;/pre&gt;

&lt;p&gt;This property will never be needed in the index since it will always be the same value until it is requested in Share.&lt;/p&gt;

&lt;p&gt;Next we need to implement our logic.  This requires a new Java class that implements PropertyDecorator.&lt;/p&gt;

&lt;pre class=&quot;brush: java; title: ; notranslate&quot; title=&quot;&quot;&gt;public class CustomProperty
    implements PropertyDecorator
{

  //Add any needed services

    @Override
    public Serializable decorate(NodeRef nodeRef, String propertyName, Serializable value)
    {
        Map&amp;lt;String, Serializable&amp;gt; map = new LinkedHashMap&amp;lt;String, Serializable&amp;gt;(4);

        //Add logic here

        //One to many
        map.put(&quot;key&quot;, value);

        return (Serializable)map;
    }

}
&lt;/pre&gt;

&lt;p&gt;This also requires a new Spring bean definition.&lt;/p&gt;

&lt;pre class=&quot;brush: xml; title: ; notranslate&quot; title=&quot;&quot;&gt;&amp;lt;bean id=&quot;customProperty&quot; class=&quot;org.alfresco.extension.repo.jscript.app.CustomProperty&quot;&amp;gt;
   &amp;lt;!-- Any needed service --&amp;gt;
  &amp;lt;/bean&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Lastly we need to add it to the list of propertyDecorators.  &lt;em&gt;&lt;strong&gt;Update:&lt;/strong&gt; I’ve add a &lt;a href=&quot;http://jared.ottleys.net/alfresco/alfresco-property-decorators-cont&quot; title=&quot;Alfresco: Property Decorators — cont.&quot;&gt;new post&lt;/a&gt; that covers how the mapping should occur and added a new bean here.&lt;/em&gt; &lt;del datetime=&quot;2012-04-02T20:26:51+00:00&quot;&gt;Currently this requires overwriting the out of the box definition for applicationScriptUtils.  This could cause issues if you have several different AMPs that need to overwrite this bean. (I’ve opened ALF-13038 for this issue).&lt;br /&gt; &lt;/del&gt;&lt;/p&gt;

&lt;pre class=&quot;brush: xml; title: ; notranslate&quot; title=&quot;&quot;&gt;&amp;lt;bean id=&quot;customApplicationScriptUtils&quot; parent=&quot;applicationScriptUtils&quot;&amp;gt;
 &amp;lt;property name=&quot;decoratedProperties&quot;&amp;gt;
    &amp;lt;map merge=&quot;true&quot;&amp;gt;
       &amp;lt;entry key=&quot;alf:propertyHolder&quot;&amp;gt;
          &amp;lt;ref bean=&quot;customDecoratorBean&quot;/&amp;gt;
       &amp;lt;/entry&amp;gt;
    &amp;lt;/map&amp;gt;
 &amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Now this completes the repo side of our extension.  Now we need to work with the values returned on the Share side.  We needr a status indicator so we’ll focus there.&lt;/p&gt;

&lt;p&gt;First we’ll define the evaluator.  We need to add the evaluator to &lt;code&gt;web-extension/custom-slingshot-something-context.xml&lt;/code&gt;&lt;/p&gt;

&lt;pre class=&quot;brush: xml; title: ; notranslate&quot; title=&quot;&quot;&gt;&amp;lt;bean id=&quot;evaluator.doclib.indicator.custom&quot; parent=&quot;evaluator.doclib.metadata.value&quot;&amp;gt;
      &amp;lt;property name=&quot;accessor&quot; value=&quot;properties.customProperty&quot;/&amp;gt;
	  &amp;lt;property name=&quot;comparator&quot;&amp;gt;
         &amp;lt;bean class=&quot;org.alfresco.web.evaluator.StringEqualsComparator&quot;&amp;gt;
            &amp;lt;property name=&quot;value&quot; value=&quot;true&quot; /&amp;gt;
         &amp;lt;/bean&amp;gt;
      &amp;lt;/property&amp;gt;
   &amp;lt;/bean&amp;gt;
&lt;/pre&gt;

&lt;p&gt;It is important to note that the value of the accessor is not the content model property name, but the key value used in our map from the CustomProperty class.&lt;/p&gt;

&lt;p&gt;And finally, we use the evaluator in our indicator config. This is added to our &lt;code&gt;share-config-custom.xml&lt;/code&gt; under the &lt;code&gt;META-INF&lt;/code&gt; in our custom jar file.&lt;/p&gt;

&lt;pre class=&quot;brush: xml; title: ; notranslate&quot; title=&quot;&quot;&gt;&amp;lt;config evaluator=&quot;string-compare&quot; condition=&quot;DocumentLibrary&quot;&amp;gt;
		&amp;lt;indicators&amp;gt;
			&amp;lt;indicator id=&quot;customDecorator&quot; index=&quot;250&quot; icon=&quot;custom-16.png&quot;&amp;gt;
				&amp;lt;evaluator&amp;gt;evaluator.doclib.indicator.custom&amp;lt;/evaluator&amp;gt;
			&amp;lt;/indicator&amp;gt;
		&amp;lt;/indicators&amp;gt;
&amp;lt;/config&amp;gt;
&lt;/pre&gt;

&lt;p&gt;In conclusion, the Share Document Library Extension Framework is a powerful new tool in the developer toolbox.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://jared.ottleys.net/alfresco/alfresco-property-decorators&quot;&gt;Alfresco: Property Decorators&lt;/a&gt; was originally published by Jared Ottley at &lt;a href=&quot;http://jared.ottleys.net&quot;&gt;I exist as I am&lt;/a&gt; on February 15, 2012.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Alfresco: Share Discussion Notification]]></title>
  <link rel="alternate" type="text/html" href="http://jared.ottleys.net/alfresco/alfresco-share-discussion-notification" />
  <id>http://jared.ottleys.net/alfresco/alfresco-share-discussion-notification</id>
  <published>2011-06-02T00:00:00-06:00</published>
  <updated>2011-06-02T00:00:00-06:00</updated>
  <author>
    <name>Jared Ottley</name>
    <uri>http://jared.ottleys.net</uri>
    <email>jared@ottleys.net</email>
  </author>
  <content type="html">&lt;p&gt;A few months ago in the Alfresco Forums, a user asked about adding email notification to Share Site Discussions.  We went back and forth working out a rough way to accomplish this (some of this in private messages).  And then a couple of weeks ago the question came up internally.  I passed on what we had figured out and told them I would put together a blog post.&lt;/p&gt;

&lt;h2 id=&quot;so-what-are-we-trying-to-accomplish&quot;&gt;&lt;strong&gt;So what are we trying to accomplish?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The Share Site Discussion Components supports the following:&lt;/p&gt;

&lt;div&gt;
  &lt;ul&gt;
    &lt;li&gt;
      Threaded Discussions &amp;#8211; Post topic and replies
    &lt;/li&gt;
    &lt;li&gt;
      Dynamic Filtering &amp;#8211; Tags/New/Hot/All/My Topics
    &lt;/li&gt;
    &lt;li&gt;
      RSS Feed for latest discussions
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;Notifications of new posts can happen over RSS and to the Site Activities Dashlet both of which require access to the system, most likely behind a firewall.  Email notifications can provide updates the don’t require direct access to the system, unless you are looking to update the post.&lt;/p&gt;

&lt;h2 id=&quot;where-to-start&quot;&gt;&lt;strong&gt;Where to start?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;There are a few things that we need to know as we get started. First, when a site is created in Alfresco Share, the content nodes supporting discussions are not created.  Only after a user accesses the discussion component does it get created.&lt;/p&gt;

&lt;p&gt;Second, discussions are created as &lt;code&gt;fm:topic&lt;/code&gt; types.  Posts are added as children of &lt;code&gt;fm:topic&lt;/code&gt; as a &lt;code&gt;fm:post&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-a-rule&quot;&gt;&lt;strong&gt;Using a Rule&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The simplest way to add notifications is as a rule via the Alfresco Explorer client on the discussion space that is created for the site, under the Sites space.  Adding a rule to the disucssions space matching all content items will result on two emails (one for the creation of the topic and one for the first post).  So we  need to be more specific: We need to expose the Forum Post and  Topic types as Subtypes to the rules engine.  You add fm:topic as well if you want to enable delete notifications&lt;/p&gt;

&lt;p&gt;To &lt;code&gt;web-client-config-custom.xml&lt;/code&gt; add&lt;/p&gt;

&lt;pre class=&quot;brush: xml; title: ; notranslate&quot; title=&quot;&quot;&gt;&amp;lt;alfresco-config&amp;gt;
    &amp;lt;config evaluator=&quot;string-compare&quot; condition=&quot;Action Wizards&quot;&amp;gt;
        &amp;lt;subtypes&amp;gt;
            &amp;lt;type name=&quot;fm:post&quot;/&amp;gt;
            &amp;lt;type name=&quot;fm:topic&quot;/&amp;gt;
        &amp;lt;/subtypes&amp;gt;
    &amp;lt;/config&amp;gt;
&amp;lt;/alfresco-config&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Topics are the best choice for building rules on.  Notifications on &lt;code&gt;fm:topic&lt;/code&gt; will work for create and delete but not update.  The title of a topic is stored on the first post of a discussion.  You can’t delete individual posts but you can delete a Topic so when specifying a delete notification it can be made directly against a topic,but again…it is easier to just do the same using fm:post.&lt;/p&gt;

&lt;p&gt;The notification template would be added to email templates and would look like:&lt;/p&gt;

&lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&gt;A new post is available in the &#39;${document.parent.childAssocs[&quot;cm:contains&quot;][0].properties.title}&#39; dicussion in the &#39;${document.parent.parent.parent.properties.name}&#39; site, it was added by ${person.properties.firstName}&amp;lt;#if person.properties.lastName?exists&amp;gt; ${person.properties.lastName}&amp;lt;/#if&amp;gt;.

You can view it through this link:
${url.serverPath}/share/page/site/${document.parent.parent.parent.properties.name}/discussions-topicview?topicId=${document.parent.children[0].name}&amp;amp;listViewLinkBack=true
&lt;/pre&gt;

&lt;h2 id=&quot;email-notification-rule&quot;&gt;&lt;strong&gt;Email Notification Rule&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;An email rule is simple to setup but the maintenance cost can be high.  You have to add each user/group manually and Share site groups are not visible to the Explorer client.&lt;/p&gt;

&lt;p&gt;The next option is to script the notification.   A Share site group or dynamically build email list of those participating in the discussion.  (A nice to have would be to build in a watch option for those who may not participate in the discussion but want to be notified.)&lt;/p&gt;

&lt;h2 id=&quot;mail-action-sample-for-group-or-individual&quot;&gt;&lt;strong&gt;Mail action sample for group or individual.&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;to_many&lt;/code&gt; paramater currently only supports one group at a time….if you need to send to multiple people or groups, you’ll need to loop over the &lt;code&gt;to_many&lt;/code&gt; or &lt;code&gt;to&lt;/code&gt; paramaters and execute against each.&lt;/p&gt;

&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;var siteGroup = &quot;GROUP_site_&quot; + document.parent.parent.parent.name;
var template = &quot;Data Dictionary/Email Templates/Notify Email Templates/share_discussion_notification.ftl&quot;;

// create mail action
var mail = actions.create(&quot;mail&quot;);
mail.parameters.to_many = siteGroup;
//mail.parameters.from (with no from address provided the email address of the user triggering the action is used)
mail.parameters.subject=&quot;New Post in Discussion: &quot;+document.parent.childAssocs[&quot;cm:contains&quot;][0].properties.title;
mail.parameters.template = companyhome.childByNamePath(template);

//execute action against a document
mail.execute(document);
&lt;/pre&gt;

&lt;p&gt;This option also will send email to all users in a group…even if their account has been disabled.&lt;/p&gt;

&lt;p&gt;Another option when scripting is to dynamically build the notification list  – send only to those that are part of the discussion.  You can walk the posts through the Child Associations of the topic to build an array of users.  For smaller discussion threads there will not be that high of a cost. (Small here is a relative term, as I don’t have any metrics to say what is small).&lt;/p&gt;

&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;var emailAddresses = [];

//for p expresion variable
var p, e, a;

//change to use your template
var template = &quot;Data Dictionary/Email Templates/Notify Email Templates/share_discussion_notification.ftl&quot;;

function getEmail(person) {
	var personNode = people.getPerson(person);
	return personNode.properties.email;
}

// build emailAddresses
for (p = 0; p &amp;lt; document.parent.childAssocs[&quot;cm:contains&quot;].length; p += 1) {
	var user = document.parent.childAssocs[&quot;cm:contains&quot;][p].properties.creator;
	var email = getEmail(user);

	//Is the emailAddress already in the array? If not, add it
	if (emailAddresses.length &amp;gt; 0) {
		var match = false;
		for (e = 0; e &amp;lt; emailAddresses.length; e += 1) {
			if (emailAddresses[e] === email) {
				match = true;
				break;
			}
		}

		if (!match) {
			emailAddresses.push(email);
		}
	} else {
		emailAddresses.push(email);
	}
}

// create mail action
var mail = actions.create(&quot;mail&quot;);
mail.parameters.subject = &quot;New Post in Discussion: &quot; + document.parent.childAssocs[&quot;cm:contains&quot;][0].properties.title;
mail.parameters.template = companyhome.childByNamePath(template);

//send an email for each address
for (a = 0; a &amp;lt; emailAddresses.length; a += 1) {
	mail.parameters.to = emailAddresses[a];
	//execute action against a document
	mail.execute(document);
}
&lt;/pre&gt;

&lt;p&gt;Another option would be to add an aspect to the topic that stores a collection of all the users who have participated in the thread.  (You could also add a place to collect watchers, but you’d also need to extend the UI to allow you to capture the users for this list.)  The aspect would be added on creation on a new topic. (Use Usernames, so that you can avoid  any issues with email addresses changing — Usernames are unmutable).  When a user adds a post, their email address is added to the collection for notification.&lt;/p&gt;

&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;var creator = document.properties.creator;

//for expresion variable
var u, a;

//change to use your template
var template = “Data Dictionary/Email Templates/Notify Email Templates/share_discussion_notification.ftl”;

function getEmail(person) {
	var personNode = people.getPerson(person);
	return personNode.properties.email;
}

//Look for match in n:users, if no match add them other wise, ignore the user
function updateUsers(user) {
	if (document.parent.properties[&quot;n:users&quot;] === null) {
		document.parent.properties[&quot;n:users&quot;] = [];
		document.parent.properties[&quot;n:users&quot;].push(user);
		document.parent.save();
	} else {
		var match = false;

		for (u = 0; u &amp;lt; document.parent.properties[&quot;n:users&quot;].length; u += 1) {
			if (document.parent.properties[&quot;n:users&quot;][u] === user) {
				match = true;
				break;
			}
		}

		if (!match) {
			document.parent.properties[&quot;n:users&quot;].push(user);
			document.parent.save();
		}
	}
}

//Check for notifiable aspect
if (document.parent.hasAspect(&quot;n:notifiable&quot;) {

	//if the user is not already in the n:users property of the notifiable aspect, add them
	updateUsers(creator);

	//create mail action
	var mail = actions.create(“mail”);
	mail.parameters.subject = “New Post in Discussion: ” + document.parent.childAssocs[&quot;cm:contains&quot;][0].properties.title;
	mail.parameters.template = companyhome.childByNamePath(template);

	//send an email for each user in n:users
	for (a = 0; a &amp;lt; document.parent.properties[&quot;n:users&quot;].length; a += 1) {
		mail.parameters.to = getEmail(document.parent.properties[&quot;n:users&quot;][a]);

		//execute action against a document
		mail.execute(document);
	}
} else {
	logger.log(&quot;The notifiable aspect has not been added to the topic: &quot; + document.parent.name;
}
&lt;/pre&gt;

&lt;p&gt;These options should also take into account disabled accounts: (&lt;code&gt;person.isAccountEnabled(userName);&lt;/code&gt; The problem with this is that &lt;code&gt;isAccountEnables&lt;/code&gt; requires admin privileges.  There is no runAs for this kind of javascript so implementing this would require implementing the action in Java, which is outside the scope of this exercise.&lt;/p&gt;

&lt;p&gt;Hopefully, I’ve given you some ideas of ways to approach adding discussion notifications.  The key here in discovering how to approach this was knowing where to look at how discussions are stored in the repository.  In fact this is the key for most any extension to Alfresco:  Asking yourself how does this work for this feature, which is similar to what I need, work in Alfresco? Understanding how this is pulled together from looking at the content model, looking at actual content/nodes through the node browser, understanding the relationships between nodes: parent/child and peer and sometimes digging into the source code can help to expand your understanding when looking to extend Alfresco.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://jared.ottleys.net/alfresco/alfresco-share-discussion-notification&quot;&gt;Alfresco: Share Discussion Notification&lt;/a&gt; was originally published by Jared Ottley at &lt;a href=&quot;http://jared.ottleys.net&quot;&gt;I exist as I am&lt;/a&gt; on June 02, 2011.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Alfresco: Simple File Diff]]></title>
  <link rel="alternate" type="text/html" href="http://jared.ottleys.net/alfresco/alfresco-simple-file-diff" />
  <id>http://jared.ottleys.net/alfresco/alfresco-simple-file-diff</id>
  <published>2010-11-28T00:00:00-07:00</published>
  <updated>2010-11-28T00:00:00-07:00</updated>
  <author>
    <name>Jared Ottley</name>
    <uri>http://jared.ottleys.net</uri>
    <email>jared@ottleys.net</email>
  </author>
  <content type="html">&lt;p&gt;I’ve heard asked many times by customers and community members if there was a way to diff files in Alfresco and alas there isn’t an OTB way to do this.  A month ago the discussion came up again internally.  And I thought it might be fun to tackle this as side project just to see if/what was possible.  So I took an evening and hammered out a simple Java class that did a comparison between two text files.  Once I saw that I had at least the basics (annotate the differences between two files) and had gotten the question of basic possibility/difficulty out of the way I moved on to other projects.&lt;/p&gt;

&lt;p&gt;Today almost the entire family is sick so I thought I’d pick up the project again, moving the Java class to a Java Backed web script.&lt;/p&gt;

&lt;p&gt;The web script is a simple GET that takes the nodeRef of two files, or two versions of the same file and outputs a simple HTML page that highlights the differences between the two.  There are no complex algorithms that take into account shifts in blocks or identifies just the text in a line that has changed.  It is a simple line by line comparison of two pieces of content. It is not integrated in to Share or Explorer at this time.  I might take that as a separate sick day project (or accept any code contributions to add that).&lt;/p&gt;

&lt;p&gt;I’ll admit right off that the code is ugly and repetitive.  But this is more of a Proof of Concept than a full production ready implementation (though it could definitely be used as such to provide a quick view of differences).&lt;/p&gt;

&lt;p&gt;I’ve also probably bored you with the above so let’s just jump right in before I completely lose you… &lt;img src=&quot;http://jared.ottleys.net/wp-includes/images/smilies/icon_wink.gif&quot; alt=&quot;;-)&quot; class=&quot;wp-smiley&quot; /&gt; &lt;/p&gt;

&lt;h2 id=&quot;using-the-web-script&quot;&gt;&lt;strong&gt;Using The Web Script&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The web script is called by the following URL:&lt;/p&gt;

&lt;p&gt;alfresco/service/file/{protocol_1}/{identifier_1}/{id_1}/diff/{protocol_2}/{identifier_2}/{id_2}&lt;/p&gt;

&lt;p&gt;For real world examples we’ll first look at comparing two files&lt;/p&gt;

&lt;p&gt;alfresco/service/file/workspace/SpacesStore/dd83c9f6-81b7-462b-8a1a-1e9a2af251dd/diff/workspace/SpacesStore/ca65d129-6c2c-4ba0-936d-d7626f94f23a&lt;/p&gt;

&lt;p&gt;Second comparing two versions of the same file&lt;/p&gt;

&lt;p&gt;alfresco/service/file/workspace/SpacesStore/dd83c9f6-81b7-462b-8a1a-1e9a2af251dd/diff/versionStore/version2Store/ca65d129-6c2c-4ba0-936d-d7626f94f23a&lt;/p&gt;

&lt;p&gt;What is returned is, as stated above, a simple HTML highlighting the differences&lt;/p&gt;

&lt;p style=&quot;text-align: center&quot;&gt;
  &lt;a href=&quot;http://jared.ottleys.net/files/2010/11/Screen-shot-2010-11-28-at-4.46.07-PM.png&quot; rel=&quot;lightbox[416]&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-417&quot; src=&quot;http://jared.ottleys.net/files/2010/11/Screen-shot-2010-11-28-at-4.46.07-PM.png&quot; alt=&quot;&quot; width=&quot;582&quot; height=&quot;197&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Each line that is different is highlighted in blue.  Simple and to the point.&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;&lt;strong&gt;The Code&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;This is just a little Declarative Web Script that reads the content line by line and then compares the hash of each line to see differences.  When a difference is found it is wrapped in HTML to annotate the difference so that when displayed, CSS can take care of highlighting the differences.&lt;/p&gt;

&lt;p&gt;A couple of things that I think are important to note:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;File length:&lt;/strong&gt; When comparing two files there is always the possibility that one is longer/shorter than the other.  To simplify the comparison, I just append lines with a single space to the shorter file, simplifying any computational work needed for the comparison caused by the difference in length. 
    &lt;ul&gt;
      &lt;li&gt;I mentioned above that the appended line contains a single space.  This is done so the that the line appears in the output.  &amp;lt;div&amp;gt; tags with no content can be ignored by some browsers. The annotation/presentation uses a combination of &amp;lt;div&amp;gt; and &amp;lt;pre&amp;gt; tags.  The space is maintained in a &amp;lt;pre&amp;gt; tag forces the div element to be visible.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;**Special Characters: **Because the output for the comparison is targeted for HTML, it is important to escape all characters/strings that could be interpreted by the browser as presentation elements.  Apache Commons (included with Alfresco) has classes to help do this.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Gotcha!:&lt;/strong&gt; When I was initially testing the code, the file content kept appending files to the previous request.  So remember when defining a Collection as a class scoped variable to call clear() on the List to make sure it is empty before it gets reused.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This extension is available as an &lt;a href=&quot;http://alfresco-simple-file-diff.googlecode.com/files/alfresco-filediff-webscript-0.1.amp&quot;&gt;AMP&lt;/a&gt;. The source is available in the &lt;a href=&quot;http://code.google.com/p/alfresco-simple-file-diff/&quot;&gt;Google Code Project&lt;/a&gt;.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://jared.ottleys.net/alfresco/alfresco-simple-file-diff&quot;&gt;Alfresco: Simple File Diff&lt;/a&gt; was originally published by Jared Ottley at &lt;a href=&quot;http://jared.ottleys.net&quot;&gt;I exist as I am&lt;/a&gt; on November 28, 2010.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Alfresco: Alfresco PDF Tool Kit &#8211; Insert PDF Action]]></title>
  <link rel="alternate" type="text/html" href="http://jared.ottleys.net/alfresco/alfresco-alfresco-pdf-tool-kit-insert-pdf-action" />
  <id>http://jared.ottleys.net/alfresco/alfresco-alfresco-pdf-tool-kit-insert-pdf-action</id>
  <published>2010-11-27T00:00:00-07:00</published>
  <updated>2010-11-27T00:00:00-07:00</updated>
  <author>
    <name>Jared Ottley</name>
    <uri>http://jared.ottleys.net</uri>
    <email>jared@ottleys.net</email>
  </author>
  <content type="html">&lt;p&gt;I’ve taken a bit of Holiday time to update the Alfresco PDF Toolkit.  &lt;a href=&quot;http://www.unorganizedmachines.com/&quot;&gt;Nate&lt;/a&gt; has been doing an outstanding job adding &lt;a href=&quot;http://www.unorganizedmachines.com/site/software-and-technology/34-software-development/99-watermarking-pdf-documents-with-alfresco&quot;&gt;Watermarking&lt;/a&gt;, &lt;a href=&quot;http://www.unorganizedmachines.com/site/software-and-technology/34-software-development/106-alfresco-pdf-toolkit-digital-signatures&quot;&gt;Digital Signatures&lt;/a&gt;, &lt;a href=&quot;http://www.unorganizedmachines.com/site/software-and-technology/34-software-development/101-encrypting-pdf-documents-with-alfresco&quot;&gt;Encryption&lt;/a&gt; and cleaning up my messy code.  But it was time to add a little bit myself.&lt;/p&gt;

&lt;p&gt;So I took sometime this evening to add in one of my planned actions: Insert PDF.  This action allows you to insert a PDF into another PDF at a specific page.&lt;/p&gt;

&lt;p&gt;This is a pretty straight forward action to test:  From the Document Details page of the PDF you want to insert content into, select Run Action (This action can also be run through the rules engine or scripted).&lt;/p&gt;

&lt;p&gt;From the list of Actions you’ll want to select Insert PDF.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jared.ottleys.net/files/2010/11/Screen-shot-2010-11-27-at-7.52.02-PM.png&quot; rel=&quot;lightbox[406]&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-410&quot; src=&quot;http://jared.ottleys.net/files/2010/11/Screen-shot-2010-11-27-at-7.52.02-PM.png&quot; alt=&quot;&quot; width=&quot;389&quot; height=&quot;104&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you will want to set the parameters for the insert.  There are 4 parameters for an insert:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; This is the name of the new file that will be generated.  No extension is needed, it will automatically be added.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Destination:&lt;/strong&gt; Space where the new file will be stored.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Insert at page:&lt;/strong&gt; Where page 1 of the inserted PDF will start in the targeted PDF.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Insert:&lt;/strong&gt; The PDF to insert into the targeted PDF&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;http://jared.ottleys.net/files/2010/11/Screen-shot-2010-11-27-at-7.52.24-PM.png&quot; rel=&quot;lightbox[406]&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-411&quot; src=&quot;http://jared.ottleys.net/files/2010/11/Screen-shot-2010-11-27-at-7.52.24-PM.png&quot; alt=&quot;&quot; width=&quot;621&quot; height=&quot;319&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, you’ll get a message summarizing the action you are taking&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jared.ottleys.net/files/2010/11/Screen-shot-2010-11-27-at-7.52.58-PM.png&quot; rel=&quot;lightbox[406]&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-412&quot; src=&quot;http://jared.ottleys.net/files/2010/11/Screen-shot-2010-11-27-at-7.52.58-PM.png&quot; alt=&quot;&quot; width=&quot;488&quot; height=&quot;62&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See pretty simple!&lt;/p&gt;

&lt;p&gt;The latest &lt;a href=&quot;http://alfresco-pdf-toolkit.googlecode.com/files/alfresco-pdf-toolkit-0.97.amp&quot;&gt;amp&lt;/a&gt; and &lt;a href=&quot;http://code.google.com/p/alfresco-pdf-toolkit/source/checkout&quot;&gt;source&lt;/a&gt; can be found at the &lt;a href=&quot;http://code.google.com/p/alfresco-pdf-toolkit&quot;&gt;Alfresco PDF Toolkit&lt;/a&gt; project site.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://jared.ottleys.net/alfresco/alfresco-alfresco-pdf-tool-kit-insert-pdf-action&quot;&gt;Alfresco: Alfresco PDF Tool Kit &#8211; Insert PDF Action&lt;/a&gt; was originally published by Jared Ottley at &lt;a href=&quot;http://jared.ottleys.net&quot;&gt;I exist as I am&lt;/a&gt; on November 27, 2010.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Alfresco: Default Quota Policy]]></title>
  <link rel="alternate" type="text/html" href="http://jared.ottleys.net/alfresco/alfresco-default-quota-policy" />
  <id>http://jared.ottleys.net/alfresco/alfresco-default-quota-policy</id>
  <published>2010-09-15T00:00:00-06:00</published>
  <updated>2010-09-15T00:00:00-06:00</updated>
  <author>
    <name>Jared Ottley</name>
    <uri>http://jared.ottleys.net</uri>
    <email>jared@ottleys.net</email>
  </author>
  <content type="html">&lt;p&gt;&lt;em&gt;Updated: Added new tested versions&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For this post I want to share another policy from recent request from a customer.  The project was to help them develop a way to have usage quotas set to a default value when a new user/person was added to Alfresco. (There is an important distinction between the two.)  A few months ago I had a discussion about possible ways to implement this kind of functionality with a co-worker and had a few ideas brewing as we started the engagement.&lt;/p&gt;

&lt;p&gt;First some background on quotas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The default quota in Alfresco is unlimited.  In other words, there is no limit in the amount (total size) of content a user can add/own in Alfresco.&lt;/li&gt;
  &lt;li&gt;A quota can be set either on creation or at anytime during a users lifetime. 
    &lt;ul&gt;
      &lt;li&gt;From within the UI a quota can be in either GB, MB or KB.&lt;/li&gt;
      &lt;li&gt;From an API  (Web Script, JavaScript, Java) it accepts the size in bytes.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;See &lt;a href=&quot;http://wiki.alfresco.com/wiki/Usages_and_Quotas&quot;&gt;http://wiki.alfresco.com/wiki/Usages_and_Quotas&lt;/a&gt; for additional details&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When developing a behavior I continually reference &lt;a href=&quot;http://ecmarchitect.com/&quot;&gt;Jeff Potts’s&lt;/a&gt; tutorial on &lt;a href=&quot;http://ecmarchitect.com/archives/2007/09/26/770&quot;&gt;implementing behaviors&lt;/a&gt;. His table of available policies is a great quick reference.  Of course the definitive source is the Alfresco source code, but not much has changed since Jeff wrote the article.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript Behavior&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first attempt to implementing this policy was to use a behavior implemented in JavaScript.  I used Jeff’s JavaScript example as the seed for my code.  In fact there was very little I needed to change (mostly just the business logic). It is a great outline to get you going.&lt;/p&gt;

&lt;p&gt;Using JavaScript wasn’t completely successful.  The code did work up to a point and that point was setting the quota.  There is an undocumented (in the wiki) JS function that can be used to set quotas.&lt;/p&gt;

&lt;p&gt;From the People class (note the comment):&lt;/p&gt;

&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;/**
 * Set the content quota in bytes for a person.
 * Only the admin authority can set this value.
 *
 * @param person    Person to set quota against.
 * @param quota     As a string, in bytes, a value of &quot;-1&quot; means no quota is set
*/
public void setQuota(ScriptNode person, String quota)&lt;/pre&gt;

&lt;p&gt;During the transaction the quota was being set, but once the transaction was committed it was lost. The problem being (again see the comments) that the setQuota must be executed by an admin.  A quota must be set explicitly by an admin.&lt;/p&gt;

&lt;p&gt;The JavaScript API lacks the ability to execute a script as one user but then run specific code in that script as another user.  This is done for &lt;a href=&quot;http://forums.alfresco.com/en/viewtopic.php?f=6&amp;amp;t=28475&amp;amp;start=0&quot;&gt;security reasons&lt;/a&gt; (like being able to keep a user from uploading and then executing a malicious script).&lt;/p&gt;

&lt;p&gt;While the script did not work as desired it still may be useful for something else.  So I’m including links to the &lt;a href=&quot;http://svn.ottleys.net/alfresco/misc_scripts/js_behavior/behaviour-context.xml&quot;&gt;context file&lt;/a&gt; and &lt;a href=&quot;http://svn.ottleys.net/alfresco/misc_scripts/js_behavior/behaviour.js&quot;&gt;script&lt;/a&gt; as part of this post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Java Behavior&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because we need to  set the quota as an admin user, we’ll switch to Java which provides a useful means to run code as one user, and execute specific parts as a different user.&lt;/p&gt;

&lt;p&gt;Before we jump to that, let’s talk about some of the specifics of our policy:&lt;/p&gt;

&lt;p&gt;First, there is not much difference in the structure needed for this behavior and the &lt;a href=&quot;http://code.google.com/p/alfresco-maxversion-policy/&quot;&gt;Max Version Policy&lt;/a&gt; I wrote about in a &lt;a href=&quot;http://jared.ottleys.net/alfresco/alfresco-max-version-policy&quot;&gt;previous post&lt;/a&gt;.  So I used it as a template for this project.&lt;/p&gt;

&lt;p&gt;Next, users/people in Alfresco are stored as nodes.  If you start to dig into &lt;a href=&quot;http://www.alfresco.com/help/webclient/tasks/tuh-admin-nodebrowser.html&quot;&gt;the node browser&lt;/a&gt; you may be drawn to find your users in the user://alfrecoUserStore store.  This is, as the name suggestions, the Alfresco User Store which is used as the native Alfresco authentication source (&lt;a href=&quot;http://wiki.alfresco.com/wiki/Authentication_Subsystems#AlfrescoNtlm&quot;&gt;alfrescoNTLM&lt;/a&gt;).  The nodes in this store are of type {http://www.alfresco.org/model/user/1.0}user.  Quotas are a property of {http://www.alfresco.org/model/content/1.0}person and are found in the workspace://SpacesStore under system -&amp;gt; people.&lt;/p&gt;

&lt;p&gt;Alfresco has no specific policies for user nodes (like an onCreateUser policy), but since they are just nodes we can leverage the onCreateNode policy. Also because they are just nodes, when using an onCreateNode policy we don’t want the policy to be run every time a node is created.  We want to target cm:person nodes.  Otherwise, we would need to overcomplicate the code with additional tests to only only execute the business logic when the newly created node is of type cm:person.  So we can bind our policy to a specific type.  Similarly to the max version policy we initialize our behavior and bind it in the init method.&lt;/p&gt;

&lt;pre class=&quot;brush: java; title: ; notranslate&quot; title=&quot;&quot;&gt;public void init() {

this.onCreateNode = new JavaBehaviour(this, &quot;onCreateNode&quot;, NotificationFrequency.TRANSACTION_COMMIT);

this.policyComponent.bindClassBehaviour(QName.createQName(NamespaceService.ALFRESCO_URI, &quot;onCreateNode&quot;), ContentModel.TYPE_PERSON, this.onCreateNode);

}&lt;/pre&gt;

&lt;p&gt;In the init() above we bind our policy: QName.createQName(NamespaceService.ALFRESCO_URI, “onCreateNode”), the type: ContentModel.TYPE_PERSON and the behavior: this.onCreateNode together.&lt;/p&gt;

&lt;p&gt;Next we need to implement the onCreateNode method from the OnCreateNodePolicy in our new class&lt;/p&gt;

&lt;pre class=&quot;brush: java; title: ; notranslate&quot; title=&quot;&quot;&gt;public void onCreateNode(ChildAssociationRef childAssocRef) {&lt;/pre&gt;

&lt;p&gt;We can grab our reference to the newly created user node from the ChildAssociationRef parameter.&lt;/p&gt;

&lt;pre class=&quot;brush: java; title: ; notranslate&quot; title=&quot;&quot;&gt;final NodeRef user = childAssocRef.getChildRef();&lt;/pre&gt;

&lt;p&gt;Notice that it is using the final modifier.  Variables from an outer class that are being referenced in an inner class must be defined as final.&lt;/p&gt;

&lt;p&gt;For our default policy we also want to allow the default quota to be overwritten.  If an admin wants to set a different value for the quota at creation time we need to allow it. So we need to first get the value that was assigned to the user on the node at creation&lt;/p&gt;

&lt;pre class=&quot;brush: java; title: ; notranslate&quot; title=&quot;&quot;&gt;long currentQuota = contentUsageService.getUserQuota((String) nodeService.getProperty(user,ContentModel.PROP_USERNAME));&lt;/pre&gt;

&lt;p&gt;The default value of no quota is -1.  If an admin has set a value for the quota it will be greater than 0.&lt;/p&gt;

&lt;pre class=&quot;brush: java; title: ; notranslate&quot; title=&quot;&quot;&gt;if (currentQuota &amp;lt; 0) {

...business logic here...

}&lt;/pre&gt;

&lt;p&gt;Because quotas can only be set by an admin we need to use the runAs utility&lt;/p&gt;

&lt;pre class=&quot;brush: java; title: ; notranslate&quot; title=&quot;&quot;&gt;AuthenticationUtil.runAs(

new AuthenticationUtil.RunAsWork&amp;lt;Object&amp;gt;() {

public Object doWork() throws Exception {

...code to be run as a different user...

}

}, &quot;admin&quot;);&lt;/pre&gt;

&lt;p&gt;runAs takes two parameters: The first is the RunAsWork Object, which contains an inner class that has the code that needs to be run as another user.  Second the name of the user to execute the code as.&lt;/p&gt;

&lt;p&gt;Now in our policy we can set the quota.  We’ll use the contentUsageService to set the new users quota, taking the username and the value of the quota as parameters. Also note that default value is in bytes which is read from the spring context file for the OTB default I’ve chosen 2GB (2147483648).&lt;/p&gt;

&lt;pre class=&quot;brush: java; title: ; notranslate&quot; title=&quot;&quot;&gt;contentUsageService.setUserQuota((String) nodeService.getProperty(user, ContentModel.PROP_USERNAME), Long.parseLong(defaultQuota));

return user; &lt;/pre&gt;

&lt;p&gt;RunAsWork is also looking for a return value which I’ve set as user.  We won’t being doing anything with this value so in this case it is an arbitrary return.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The policy is &lt;a href=&quot;http://code.google.com/p/alfresco-defaultquota-policy/downloads/detail?name=alfresco-defaultquota-policy.amp&quot;&gt;packaged as an AMP&lt;/a&gt; and is downloadable from the &lt;a href=&quot;http://code.google.com/p/alfresco-defaultquota-policy/&quot;&gt;alfresco-defaultquota-policy project&lt;/a&gt; hosted on Google Code.  (See &lt;a href=&quot;http://wiki.alfresco.com/wiki/Module_Management_Tool&quot;&gt;http://wiki.alfresco.com/wiki/Module_Management_Tool&lt;/a&gt; for detailed instructions on installing AMPs.)&lt;/p&gt;

&lt;p&gt;The amp has been tested with Alfresco Enterprise 3.1.1 to 3.3.2.&lt;/p&gt;

&lt;p&gt;I’ve only tested this on Enterprise 3.3.2.  I’ll look to expand my testing soon.  If you have a chance to try it on another version of Alfresco please let me know.  (In that case you’ll need to build the amp from source, changing the version.min/max property to include the version you’re targeting.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what next?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While this policy is limited to setting the user quota, your probably thinking what else can I use this for? I know I am!  Maybe your using a database or some other none supported user store in Alfresco and you want to populate the user node properties with details from that system.  Or you want to add them to specific groups based on some complex business logic.  Or interact with external systems when a user is created in Alfresco.  What are your ideas?&lt;/p&gt;

&lt;p&gt;I also believe that this should work with any external authentication/synchronization of users into Alfresco.  I’ve not tested it, but it is the list of things to test next.&lt;/p&gt;

&lt;p&gt;I’m always looking for feedback: let me know what worked or didn’t for you.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://jared.ottleys.net/alfresco/alfresco-default-quota-policy&quot;&gt;Alfresco: Default Quota Policy&lt;/a&gt; was originally published by Jared Ottley at &lt;a href=&quot;http://jared.ottleys.net&quot;&gt;I exist as I am&lt;/a&gt; on September 15, 2010.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Alfresco: Permissions Web Scripts]]></title>
  <link rel="alternate" type="text/html" href="http://jared.ottleys.net/alfresco/alfresco-permissions-web-scripts" />
  <id>http://jared.ottleys.net/alfresco/alfresco-permissions-web-scripts</id>
  <published>2010-08-26T00:00:00-06:00</published>
  <updated>2010-08-26T00:00:00-06:00</updated>
  <author>
    <name>Jared Ottley</name>
    <uri>http://jared.ottleys.net</uri>
    <email>jared@ottleys.net</email>
  </author>
  <content type="html">&lt;p&gt;A couple of months back I was asked to write a couple of web scripts to help one of our customers to be able to check and modify permissions for content/spaces in the Alfresco repository.  I’ve finally had the chance to spend sometime testing and now writing about them.&lt;/p&gt;

&lt;p&gt;The core of the web scripts was quick to write.  The fun (more time consuming) part was working with exception handling in javascipt.  I know tons of fun right!  There are few different ways to use exception handling based on which version of Alfresco you are using.  The customer is on Enterprise 3.1 and I wanted to make sure that the web scripts also worked on the more current releases of Alfresco as well.  A &lt;a href=&quot;https://issues.alfresco.com/jira/browse/ALF-1958&quot;&gt;change (re: addition)&lt;/a&gt; was made in Enterprise 3.2.1 and Community 3.3 to help simplify exception handeling.  I’ll talk about exception handling and these differences in a follow up post.  For now let’s talk about these new web scripts.&lt;/p&gt;

&lt;h2 id=&quot;permissions-get&quot;&gt;&lt;strong&gt;permissions GET&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The first web script returns all of the permissions for a specified node.&lt;/p&gt;

&lt;p&gt;The URL used is &lt;code&gt;/alfresco/service/permissions/{store_type}/{store_id}/{id}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;store_type&lt;/code&gt;: The type of store you want to query, ex: &lt;code&gt;workspace&lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;store_id&lt;/code&gt;: The ID of the store you want to query, ex: &lt;code&gt;SpacesStore&lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;id&lt;/code&gt;: The UUID of the node, ex: &lt;code&gt;aed218e8-df44-4865-84cd-0105252f4993&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;The above values are joined together to form the nodeRef.&lt;/p&gt;

&lt;p&gt;If the node is not found a 404 error will be returned, any missing URI parameters will result in a 400 error and if you don’t have permission to view the node you will get a 401 error.&lt;/p&gt;

&lt;p&gt;The web script will return a JSON object that looks like the following:&lt;/p&gt;

&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;{ &quot;permissions&quot;: [
&quot;ALLOWED;user1;Coordinator&quot;,
&quot;ALLOWED;user2;Coordinator&quot;
] ,
&quot;inherit&quot;: false }&lt;/pre&gt;

&lt;p&gt;The return object lists the permissions in a triplet for that node. The permissions triplet follow this format:&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;[ALLOWED|DENIED];[USERNAME|GROUPNAME];PERMISSION&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;It also returns a boolean value indicating if some permissions are inherited from the parent node.&lt;/p&gt;

&lt;p&gt;The above example shows two permissions are assigned to the node: the Coordinator permission is given to user1 and user2 on this node. Permissions are not inherited from the parent node.&lt;/p&gt;

&lt;h2 id=&quot;permissions-post&quot;&gt;&lt;strong&gt;permissions POST&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;This web script enables you to modify the permissions for a given node&lt;/p&gt;

&lt;p&gt;It is called through the same URL as the above web script but as a POST instead of a get: &lt;code&gt;/alfresco/service/permissions/{store_type}/{store_id}/{id}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Again, if the node is not found a 404 error will be returned, any missing URI parameters will result in a 400 error and if you don’t have permission to modify the node, you will get a 401 error.&lt;/p&gt;

&lt;p&gt;You must also pass a JSON object containing the permissions that are being changed, deleted or added.&lt;/p&gt;

&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;{ permissions: [
&quot;REMOVE;user3;All&quot;,
&quot;REMOVE;user2;All&quot;,
&quot;ADD;user4;Coordinator&quot;,
&quot;ADD;GROUP_usergroup1;Consumer&quot;
] ,
&quot;inherit&quot;: false }
&lt;/pre&gt;

&lt;p&gt;The above example uses the following triplet to define a permission&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;[ADD|REMOVE];[USERNAME|GROUPNAME];PERMISSION&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;Where the values are defined as:&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;ADD | REMOVE&lt;/code&gt;: Do you want to add or remove the permission for this user/group? Any other value passed will result in a 400 error.
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;USERNAME | GROUPNAME&lt;/code&gt;: The user or group you want the permission to be added or removed for. Group names must be prefixed by GROUP_. Unknown users or groups will result in a 400 error.
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;PERMISSION&lt;/code&gt;: The supported permissions options are defined in&lt;br /&gt; &lt;code&gt;org.alfresco.service.cmr.security.PermissionService&lt;/code&gt; or through custom extension to the permission model. Unknown permissions will result in a 400 error.
&lt;/p&gt;

&lt;p&gt;The object can also contain an optional inherit permission value to specifying if the permissions for this node should be inherited from the parent node. Without the inherit option, the current value for the node is maintained. Inherited permissions can not be removed from a node.&lt;/p&gt;

&lt;p&gt;The return format is the same as the return format of the permissions GET web script above.&lt;/p&gt;

&lt;p&gt;This web script is also transactional: any errors will result in the node being returned to the state before the call was made. (The exception handling in the controller was added for these conditions.)&lt;/p&gt;

&lt;p&gt;These scripts can be installed as an AMP.  The &lt;a href=&quot;http://code.google.com/p/alfresco-permissions-webscripts/source/checkout&quot;&gt;code&lt;/a&gt; and &lt;a href=&quot;http://code.google.com/p/alfresco-permissions-webscripts/downloads/list&quot;&gt;AMPs&lt;/a&gt; are hosted in the &lt;a href=&quot;http://code.google.com/p/alfresco-permissions-webscripts/&quot;&gt;alfresco-permissions-webscripts&lt;/a&gt; project on Google Code.  The code is available for either &lt;a href=&quot;http://code.google.com/p/alfresco-permissions-webscripts/downloads/detail?name=alfresco-permissions-webscripts-pre.3.2.1.amp&quot;&gt;pre-3.2.1 (starting with 3.1)&lt;/a&gt; or &lt;a href=&quot;http://code.google.com/p/alfresco-permissions-webscripts/downloads/detail?name=alfresco-permissions-webscripts.amp&quot;&gt;3.2.1 to 3.3.1&lt;/a&gt;.  These are all Enterprise releases numbers.  The web scripts have been tested against these releases.  There may not be any need to modify the web scripts for Community releases (except for the min and max version numbers in the module.properties file).  Pre community 3.3 should use the pre 3.2.1 release.  No community releases have been tested. (If you try these on a community releases, please comment either here or in the Google Code Project.)&lt;/p&gt;

&lt;p&gt;In a follow up post, I’ll cover exception handling with JavaScript.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://jared.ottleys.net/alfresco/alfresco-permissions-web-scripts&quot;&gt;Alfresco: Permissions Web Scripts&lt;/a&gt; was originally published by Jared Ottley at &lt;a href=&quot;http://jared.ottleys.net&quot;&gt;I exist as I am&lt;/a&gt; on August 26, 2010.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Alfresco: JMX from the command line]]></title>
  <link rel="alternate" type="text/html" href="http://jared.ottleys.net/alfresco/alfresco-jmx-from-the-command-line" />
  <id>http://jared.ottleys.net/alfresco/alfresco-jmx-from-the-command-line</id>
  <published>2010-08-03T00:00:00-06:00</published>
  <updated>2010-08-03T00:00:00-06:00</updated>
  <author>
    <name>Jared Ottley</name>
    <uri>http://jared.ottleys.net</uri>
    <email>jared@ottleys.net</email>
  </author>
  <content type="html">&lt;p&gt;&lt;a href=&quot;http://java.sun.com/javase/6/docs/technotes/guides/jmx/index.html&quot;&gt;JMX&lt;/a&gt; is great. &lt;a href=&quot;http://www.alfresco.com&quot;&gt;Alfresco&lt;/a&gt; and &lt;a href=&quot;http://wiki.alfresco.com/wiki/JMX&quot;&gt;JMX&lt;/a&gt; is awesome. I’ve written before about &lt;a href=&quot;http://jared.ottleys.net/alfresco/tunneling-debug-and-jmx-for-alfresco&quot;&gt;configuring Alfresco to use tunneling to connect JMX &amp;amp; debuggers&lt;/a&gt; to servers that don’t allow access to the higher numbered ports (or to only a few ports).  Let’s add another cool tool. (JMX is an Enterprise only feature of Alfresco.)&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://wiki.alfresco.com&quot;&gt;Alfresco wiki&lt;/a&gt; covers a few of the &lt;a href=&quot;http://wiki.alfresco.com/wiki/JMX#Connecting_through_JMX_Consoles_.2F_JSR-160&quot;&gt;clients&lt;/a&gt; that are available out there.  Let’s add another type to the list:  JMX from the command line.  There are a &lt;a href=&quot;http://www.google.com/search?sourceid=chrome&amp;amp;ie=UTF-8&amp;amp;q=jmx+command+line&quot;&gt;couple of options&lt;/a&gt; for us to choose from.   I am partial to j&lt;a href=&quot;http://www.cyclopsgroup.org/projects/jmxterm/index.html&quot;&gt;mxterm&lt;/a&gt; from &lt;a href=&quot;http://www.cyclopsgroup.org/&quot;&gt;CyclopsGroups.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jmxterm is an opensource  JMX Client (&lt;a href=&quot;http://sourceforge.net/projects/cyclops-group/files/jmxterm/&quot;&gt;download&lt;/a&gt;).  It supports auto completion, history browsing and scripting.  In a word: cool.&lt;/p&gt;

&lt;p&gt;Let’s jump in…&lt;/p&gt;

&lt;p&gt;First thing you need to do with the client is connect&lt;/p&gt;

&lt;p&gt;With jmxterm you can pass a connection string via the jar to connect to Alfresco&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;java -jar jmxterm-1.0-alpha-4-uber.jar -l \ service:jmx:rmi:///jndi/rmi://&amp;lt;host&amp;gt;:50500/alfresco/jmxrmi -p &amp;lt;password&amp;gt; -u &amp;lt;user&amp;gt;&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;Or, you can connect via the interactive shell&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;java -jar jmxterm-1.0-alpha-4-uber.jar&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;Next, using the &lt;code&gt;open&lt;/code&gt; command connect to Alfresco&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;$&amp;gt;open service:jmx:rmi:///jndi/rmi://localhost:50500/alfresco/jmxrmi -p change_asap -u \ controlRole&amp;lt;br /&amp;gt;
#Connection to service:jmx:rmi:///jndi/rmi://localhost:50500/alfresco/jmxrmi is opened&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;Or, using the &lt;code&gt;jvms&lt;/code&gt; command (with the appropriate user permissions you can list the running java processes on the machine jmxterm is running on).&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;$&amp;gt;jvms&amp;lt;br /&amp;gt;
94822    ( ) - jmxterm-1.0-alpha-4-uber.jar&amp;lt;br /&amp;gt;
13157    (m) - org.apache.catalina.startup.Bootstrap start&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;And once again use the &lt;code&gt;open&lt;/code&gt; command to connect&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;$&amp;gt;open 13157 -u controlRole -p change_asap&amp;lt;br /&amp;gt;
#Connection to 13157 is opened&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;Now that you are connected  let’s perform a simple operation, finding out who is logged into Alfresco and then disconnect one of the users.&lt;/p&gt;

&lt;p&gt;First you’ll list the domains that are available&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;$&amp;gt;domains&amp;lt;br /&amp;gt;
#following domains are available&amp;lt;br /&amp;gt;
Alfresco&amp;lt;br /&amp;gt;
Catalina&amp;lt;br /&amp;gt;
JMImplementation&amp;lt;br /&amp;gt;
Users&amp;lt;br /&amp;gt;
axis&amp;lt;br /&amp;gt;
com.sun.management&amp;lt;br /&amp;gt;
connector&amp;lt;br /&amp;gt;
java.lang&amp;lt;br /&amp;gt;
java.util.logging&amp;lt;br /&amp;gt;
log4j&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;The bean you need is in the &lt;code&gt;Alfresco&lt;/code&gt; domain&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;$&amp;gt;domain Alfresco&amp;lt;br /&amp;gt;
#domain is set to Alfresco&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;You can look up the beans within the domain by using the &lt;code&gt;beans&lt;/code&gt; command.  There are quite a few beans in the &lt;code&gt;Alfresco&lt;/code&gt; domain, so let’s connect directly to the one that you need: &lt;code&gt;RepoServerMgmt&lt;/code&gt;. (Don’t forget jmxterm support auto completion.)&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;$&amp;gt;bean Alfresco:Name=RepoServerMgmt&amp;lt;br /&amp;gt;
#bean is set to Alfresco:Name=RepoServerMgmt&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;Now that you have the bean, you can now find out what it does by using the &lt;code&gt;info&lt;/code&gt; command&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;$&amp;gt;info&amp;lt;br /&amp;gt;
#mbean = Alfresco:Name=RepoServerMgmt&amp;lt;br /&amp;gt;
#class name = org.alfresco.repo.admin.RepoServerMgmt&amp;lt;br /&amp;gt;
# attributes&amp;lt;br /&amp;gt;
%0   - LinkValidationDisabled (boolean, r)&amp;lt;br /&amp;gt;
%1   - MaxUsers (int, r)&amp;lt;br /&amp;gt;
%2   - ReadOnly (boolean, r)&amp;lt;br /&amp;gt;
%3   - TicketCountAll (int, r)&amp;lt;br /&amp;gt;
%4   - TicketCountNonExpired (int, r)&amp;lt;br /&amp;gt;
%5   - UserCountAll (int, r)&amp;lt;br /&amp;gt;
%6   - UserCountNonExpired (int, r)&amp;lt;br /&amp;gt;
# operations&amp;lt;br /&amp;gt;
%0   - int invalidateTicketsAll()&amp;lt;br /&amp;gt;
%1   - int invalidateTicketsExpired()&amp;lt;br /&amp;gt;
%2   - void invalidateUser(java.lang.String p1)&amp;lt;br /&amp;gt;
%3   - [Ljava.lang.String; listUserNamesAll()&amp;lt;br /&amp;gt;
%4   - [Ljava.lang.String; listUserNamesNonExpired()&amp;lt;br /&amp;gt;
#there&#39;s no notifications&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;There are lots of things you can do here, you can get attributes, you can set attributes, you can run opertaions.&lt;/p&gt;

&lt;p&gt;Looking at the returned attributes you can tell a few things: the datatype of each attribute and if you can change it.  In this case none of our attributes can be modified, they are all read only (r).  ReadWrite would be signified by rw.&lt;/p&gt;

&lt;p&gt;Operations are just like Java functions: they can have a return type and you might be able pass parameters to them.&lt;/p&gt;

&lt;p&gt;It can also list notifcations, but there is no mechanism (that I have found yet) in jmxterm to subscribe or unsubscribe to them.&lt;/p&gt;

&lt;p&gt;Let’s do some more work:&lt;/p&gt;

&lt;p&gt;First let’s see how many users are logged in.&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;$&amp;gt;get UserCountNonExpired&amp;lt;br /&amp;gt;
#mbean = Alfresco:Name=RepoServerMgmt:&amp;lt;br /&amp;gt;
UserCountNonExpired = 2;&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;And now let’s find out who these two users are&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;$&amp;gt;run listUserNamesNonExpired&amp;lt;br /&amp;gt;
#calling operation listUserNamesNonExpired of mbean Alfresco:Name=RepoServerMgmt&amp;lt;br /&amp;gt;
#operation returns:&amp;lt;br /&amp;gt;
[ System, admin ]&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;So you have 2 user currently in Alfresco: System and admin&lt;/p&gt;

&lt;p&gt;Let’s log out the admin user.  (Look back at the list from the &lt;code&gt;info&lt;/code&gt; command.) You can either invalidate all of the authenticated users tickets or we can invalidate named user.  Since you just want to remove one user let’s invalidate the admin users session.  (The System user is a special account, so you will ignore it.)&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;$&amp;gt;run invalidateUser admin&amp;lt;br /&amp;gt;
#calling operation invalidateUser of mbean Alfresco:Name=RepoServerMgmt&amp;lt;br /&amp;gt;
#operation returns:&amp;lt;br /&amp;gt;
null&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;Remember that this operation does not return anything so jmxterm returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s now check and see if the admin user is still logged in.&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;$&amp;gt;run listUserNamesNonExpired&amp;lt;br /&amp;gt;
#calling operation listUserNamesNonExpired of mbean Alfresco:Name=RepoServerMgmt&amp;lt;br /&amp;gt;
#operation returns:&amp;lt;br /&amp;gt;
[ System ]&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;You’ve now run through some basic operations: connecting to Alfresco, listing and selecting the domain, listing and selecting the bean, discovering what the bean can do, getting an attribute, running an operation.&lt;/p&gt;

&lt;p&gt;The last things to cover are scripting/non-interactive mode and setting properties.&lt;/p&gt;

&lt;p&gt;From time to time you might see the need, to lock Alfresco down by setting it to Read Only mode. The following two commands will help us do this.&lt;/p&gt;

&lt;p&gt;First let’s check the current state:&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;$ echo get -s -b Alfresco:Name=RepoServerMgmt ReadOnly | java -jar jmxterm-1.0-alpha-4-uber.jar -l service:jmx:rmi:///jndi/rmi://localhost:50500/alfresco/jmxrmi -p change_asap -u controlRole -v silent -n&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;When passing commands to jmxterm, you need to echo the command into the interpreter. So the above command passes the jmxterm get command.  we pass it a &lt;code&gt;-s&lt;/code&gt; since we just want the value and not the full expression (&lt;code&gt;ReadOnly = &amp;lt;value&amp;gt;;&lt;/code&gt;) returned &lt;code&gt;-b&lt;/code&gt; names the bean and finally the attribute we are querying. On the jmxterm side we pass the connection information (connection string or PID, username and password), set the verbosity of the execution, and tell it that it should run in non-interactive mode.&lt;/p&gt;

&lt;p&gt;In this case the command returns the value &lt;code&gt;false&lt;/code&gt;. So the value of &lt;code&gt;ReadOnly&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; — Alfresco is in Read/Write mode.&lt;/p&gt;

&lt;p&gt;Now let’s put it in ReadOnly mode&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;$ echo set -b Alfresco:Category=sysAdmin,Type=Configuration,id1=default server.transaction.allow-writes false | java -jar jmxterm-1.0-alpha-4-uber.jar -l service:jmx:rmi:///jndi/rmi://localhost:50500/alfresco/jmxrmi -p change_asap -u controlRole -v silent -n&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;This follow pretty much the same pattern.  The &lt;code&gt;ReadOnly&lt;/code&gt; attribute is a read only property, so to change Alfresco into Read Only mode you set the value of &lt;code&gt;server.transaction.allow-writes&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. The set will not return any value.  You can then check the current state of the repository by running the previous command and then when you are ready to put the repository back in Read/Write mode change the value of the set command on &lt;code&gt;server.transaction.allow-writes&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://jared.ottleys.net/alfresco/alfresco-jmx-from-the-command-line&quot;&gt;Alfresco: JMX from the command line&lt;/a&gt; was originally published by Jared Ottley at &lt;a href=&quot;http://jared.ottleys.net&quot;&gt;I exist as I am&lt;/a&gt; on August 03, 2010.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Alfresco: Max Version Policy]]></title>
  <link rel="alternate" type="text/html" href="http://jared.ottleys.net/alfresco/alfresco-max-version-policy" />
  <id>http://jared.ottleys.net/alfresco/alfresco-max-version-policy</id>
  <published>2010-07-23T00:00:00-06:00</published>
  <updated>2010-07-23T00:00:00-06:00</updated>
  <author>
    <name>Jared Ottley</name>
    <uri>http://jared.ottleys.net</uri>
    <email>jared@ottleys.net</email>
  </author>
  <content type="html">&lt;p&gt;&lt;em&gt;UPDATE:  Updated code examples to match updates to source code&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As part of a POC for a customer I was asked to write an extension that allowed them to control the total number of versions allowed per versioned content. (Download links at bottom of page)&lt;/p&gt;

&lt;p&gt;Alfresco has a strong versioning story, that gives you the ability to version any content stored in the repository, no matter what the file type.  Versions are full files and not diffs of the files.  Alfresco gives you the ability to have both major and minor versions of content.  Versions can be created/updated by checkout/checkin, by rule, through any interface or through script/APIs.&lt;/p&gt;

&lt;p&gt;Alfresco also provides the ability to apply behaviors / policies to content/metadata within the repository.  You can think of these as event listeners, that allow you to take custom actions based on what is happening within the repository.  [Jeff Potts][1] has written an excellent [tutorial on creating behaviors][2], with examples for both Java and javascript. (Other resources include: )&lt;/p&gt;

&lt;p&gt;There are 4 versioning policies that we can work with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;beforeCreateVersion&lt;/li&gt;
  &lt;li&gt;afterCreateVersion&lt;/li&gt;
  &lt;li&gt;onCreateVersion&lt;/li&gt;
  &lt;li&gt;calculateVersionLabel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(For an [example of a calculateVersionLabel policy][3] look at this post and the accompanying code by [Peter][4] [Monks][5].)&lt;/p&gt;

&lt;p&gt;For this policy we are going to use afterCreateVersion:  after a version is created we want to remove any version that puts us past the max version value.&lt;/p&gt;

&lt;p&gt;You start by implementing the [policy interface][6] for the policy you want to apply.&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;public class MaxVersionPolicy implements AfterCreateVersionPolicy&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;Adding the method implemented by the interface&lt;/p&gt;

&lt;p&gt;&lt;code&gt; &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;`&amp;lt;/p&amp;gt;
&amp;lt;pre style=&quot;padding-left: 30px&quot;&amp;gt;public void afterCreateVersion(
				NodeRef versionableNode,
				Version version)&amp;lt;/pre&amp;gt;&lt;/p&gt;
&lt;p&gt;`

We also need to [bind][7] the [behavior][8] to the policy and we need to do this when the class is loaded by the springframework.  We wrap this registration in an init() method

` `

` `

`&lt;/p&gt;
&lt;pre style=&quot;padding-left: 30px&quot;&gt;	public void init() {
		this.afterCreateVersion = new JavaBehaviour(this, &quot;afterCreateVersion&quot;,
				NotificationFrequency.TRANSACTION_COMMIT);

		this.policyComponent.bindClassBehaviour(QName.createQName(
				NamespaceService.ALFRESCO_URI, &quot;afterCreateVersion&quot;),
				MaxVersionPolicy.class, this.afterCreateVersion);
	}&lt;/pre&gt;
&lt;p&gt;`

The init method is then called when spring loads the bean

` `

` `

`&lt;/p&gt;
&lt;pre&gt;		&lt;bean id=&quot;maxVersion&quot; class=&quot;org.alfresco.extension.versioning.MaxVersionPolicy&quot; init-method=&quot;init&quot;&gt;
			&lt;property name=&quot;policyComponent&quot;&gt;
				&lt;ref bean=&quot;policyComponent&quot; /&gt;
			&lt;/property&gt;
			&lt;property name=&quot;versionService&quot;&gt;
				&lt;ref bean=&quot;versionService&quot; /&gt;
			&lt;/property&gt;
			&lt;!-- The max number of versions per versioned node --&gt;
			&lt;property name=&quot;maxVersions&quot;&gt;
				&lt;value&gt;10&lt;/value&gt;
			&lt;/property&gt;
		&lt;/bean&gt;&lt;/pre&gt;
&lt;p&gt;`

Now to the meat of the policy, enforcing the removal of versions.

First we we have our maxVersion property.  This is set in the springbean (see above) and read when the bean is loaded. (You can overwrite the default value by copying the maxversionpolicy-context.xml file into the extensions directory and changing the value of the maxVersion property)

` `

` `

`&lt;/p&gt;
&lt;pre&gt;	public void setMaxVersions(int maxVersions) {
		this.maxVersions = maxVersions;
	}&lt;/pre&gt;
&lt;p&gt;`

Next we want to remove any version that puts us over the max

` `

` `

`&lt;/p&gt;
&lt;pre&gt; 	@Override
	public void afterCreateVersion(NodeRef nodeRef, Version version) {

		VersionHistory versionHistory = versionService
				.getVersionHistory(nodeRef);

		// If the current number of versions in the VersionHistory is greater
		// than the maxVersions limit, remove the root/least recent version
		if (versionHistory.getAllVersions().size() &amp;gt; maxVersions) {
			logger.debug(&quot;Removing Version: &quot;
					+ versionHistory.getRootVersion().getVersionLabel());
			versionService.deleteVersion(nodeRef, versionHistory
					.getRootVersion());
		}
	}&lt;/pre&gt;
&lt;p&gt;`

We first get the [versionHistory][9] for the node and check it against the maxVersion property. If we have more versions than the limit we delete the [least recent][10] [version][11] from the version history.

&lt;div id=&quot;attachment_363&quot; style=&quot;width: 803px&quot; class=&quot;wp-caption aligncenter&quot;&gt;
  &lt;img class=&quot;size-full wp-image-363&quot; src=&quot;http://jared.ottleys.net/files/2010/07/Screen-shot-2010-07-23-at-12.45.06-AM1.png&quot; alt=&quot;10 Version Limt&quot; width=&quot;793&quot; height=&quot;292&quot; /&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;
    Notice: 10 total versions; least recent version is 1.1; no pagination!
  &lt;/p&gt;
&lt;/div&gt;

&amp;gt; **Q:** Why are you using an if statement, instead of looping through all of the versions.  I have a few (many) more versions over the limit I want to impose?
&amp;gt; 
&amp;gt; **A:** A while statement would be more efficient in removing everything above the limit, but the versionHistory object isn&amp;#8217;t being updated with each delete in a loop (I tried) until the policy has completely run.  Luckily, as you will find as you implement custom behaviors, they get called a lot!  So while a single update will result in a single version added, you will actually see that the behavior is called multiple times for that one action (In testing I saw the behavior being called a minimum of 7 times).  While you might not clear out every version over the limit with a single update, you will see a good many of them removed.  If you want to bring every down to the limit you could create a &amp;#8220;cleaner&amp;#8221; extension that could go in and remove all of the versions over the limit (this would be a very intensive/costly operation depending on the amount of content in your repository and the size of your version history  &amp;#8211;  There several different strategies for this).  You could then use this extension to enforce that limit.

&amp;gt; **Q:** Does this affect all versioned content in the repository?  What if I only want it to work on some content?
&amp;gt; 
&amp;gt; **A:** Yes, by default this policy is being applied to all versioned content, but you could add in checks to look for a specific aspect, parent space name, property, etc. before passing through the delete code.

&amp;gt; **Q:** Compliance regulations/laws don&amp;#8217;t allow me to delete the versions, but require me keep them for X years. How can I archive versions?
&amp;gt; 
&amp;gt; **A:** There are probably several different ways to handle this.  One way could be to use Alfresco&amp;#8217;s [content store selector][12].  The content store selector allows you to configure multiple underlying filesystem locations for your content.  To the end user all of the content appears to come from the same location, while the content itself lives in different disc systems. The idea would be to set up a secondary store that would act as the archive.  When your trigger is reached, be it a property (status [property or aspect], date, etc.), a version number/count, etc. have the policy move the content to the archive space structure (The archive will need to have the cm:storeSelector aspect set to mark it to use the secondary store). Because we are working from the least recent version, the 1.0 version of the content, it becomes the first version in the archive, each subsequent version, is added as a version for the content, version numbers are then maintained in the archive. I would also add an aspect to the original node that contains a pointer/aspect to the archived version, for reference. Then delete the least recent version of the original versioned node.

Google Code Project: &amp;lt;http://code.google.com/p/alfresco-maxversion-policy/&amp;gt;

Download [Alfresco Max Version Policy AMP][13]

Tested on Alfresco (Enterprise) 3.2 &amp;#8211; 3.3.1

 [1]: http://ecmarchitect.com/
 [2]: http://ecmarchitect.com/images/articles/alfresco-behavior/behavior-article.pdf
 [3]: http://blogs.alfresco.com/wp/pmonks/2009/11/03/version-baselining/
 [4]: http://blogs.alfresco.com/wp/pmonks/
 [5]: http://twitter.com/pmonks
 [6]: http://dev.alfresco.com/resource/docs/java/repository/org/alfresco/repo/version/VersionServicePolicies.OnCreateVersionPolicy.html
 [7]: http://dev.alfresco.com/resource/docs/java/repository/org/alfresco/repo/policy/PolicyComponent.html
 [8]: http://dev.alfresco.com/resource/docs/java/repository/org/alfresco/repo/policy/JavaBehaviour.html
 [9]: http://dev.alfresco.com/resource/docs/java/repository/org/alfresco/service/cmr/version/VersionHistory.html
 [10]: http://dev.alfresco.com/resource/docs/java/repository/org/alfresco/service/cmr/version/VersionService.html
 [11]: http://dev.alfresco.com/resource/docs/java/repository/org/alfresco/service/cmr/version/Version.html
 [12]: http://wiki.alfresco.com/wiki/Content_Store_Selector
 [13]: http://code.google.com/p/alfresco-maxversion-policy/downloads/detail?name=alfresco-maxversion-policy.amp
&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://jared.ottleys.net/alfresco/alfresco-max-version-policy&quot;&gt;Alfresco: Max Version Policy&lt;/a&gt; was originally published by Jared Ottley at &lt;a href=&quot;http://jared.ottleys.net&quot;&gt;I exist as I am&lt;/a&gt; on July 23, 2010.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[UPDATED: Tunneling Debug and JMX for Alfresco]]></title>
  <link rel="alternate" type="text/html" href="http://jared.ottleys.net/alfresco/updated-tunneling-debug-and-jmx-for-alfresco" />
  <id>http://jared.ottleys.net/alfresco/updated-tunneling-debug-and-jmx-for-alfresco</id>
  <published>2010-06-11T00:00:00-06:00</published>
  <updated>2010-06-11T00:00:00-06:00</updated>
  <author>
    <name>Jared Ottley</name>
    <uri>http://jared.ottleys.net</uri>
    <email>jared@ottleys.net</email>
  </author>
  <content type="html">&lt;p&gt;Back in February I wrote a post on &lt;a href=&quot;http://jared.ottleys.net/alfresco/tunneling-debug-and-jmx-for-alfresco&quot;&gt;Tunneling Debug and JMX with Alfresco&lt;/a&gt;.  Here are a few updates to that post:&lt;/p&gt;

&lt;p&gt;0/ For JMX: From Alfresco 3.2 sp1 (enterprise release) on you no longer need to add the custom-core-services-context.xml file.  Instead in the alfresco-global.properties file add monitor.rmi.services.port=50508 to set the static port.&lt;/p&gt;

&lt;p&gt;1/ How can I get this work on Windows?  I’ve tested with two options: &lt;a href=&quot;http://cygwin.com/&quot;&gt;Cygwin&lt;/a&gt; or &lt;a href=&quot;http://www.chiark.greenend.org.uk/~sgtatham/putty/&quot;&gt;Putty&lt;/a&gt;.&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  Cygwin: this is option is the most straight forward.  Install Cygwin.  On the Select Packages screen do a search for openssh and select it for install.
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  The same ssh commands will work for creating tunnels under a Cygwin shell that you can use with Linux or Max OS X.
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  Putty: The only way I&amp;#8217;ve been successful with connecting JMX with putty was by using the &lt;a href=&quot;http://the.earth.li/~sgtatham/putty/0.60/htmldoc/Chapter7.html#plink&quot;&gt;plink&lt;/a&gt; command line executable.  The graphical interface doesn&amp;#8217;t allow you set the first hostname that is needed for the second tunnel.  plink gets this done.
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  Let&amp;#8217;s take a look at some real examples&amp;#8230;
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  For debug:
&lt;/p&gt;

&lt;p style=&quot;margin-top: 0px;margin-right: 0px;margin-bottom: 15px;margin-left: 0px;line-height: 18px;padding-top: 0px;padding-right: 0px;padding-bottom: 0px;padding-left: 60px&quot;&gt;
  On the server:
&lt;/p&gt;

&lt;p style=&quot;margin-top: 0px;margin-right: 0px;margin-bottom: 15px;margin-left: 0px;line-height: 18px;padding-top: 0px;padding-right: 0px;padding-bottom: 0px;padding-left: 60px&quot;&gt;
  Add the following to your &lt;code style=&quot;padding: 0px;margin: 0px&quot;&gt;alfresco.sh&lt;/code&gt; file:
&lt;/p&gt;

&lt;p style=&quot;margin-top: 0px;margin-right: 0px;margin-bottom: 15px;margin-left: 0px;line-height: 18px;padding-top: 0px;padding-right: 0px;padding-bottom: 0px;padding-left: 60px&quot;&gt;
  &lt;code style=&quot;padding: 0px;margin: 0px&quot;&gt;export JAVA_OPTS=&quot;${JAVA_OPTS} -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8082&quot;&lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;margin-top: 0px;margin-right: 0px;margin-bottom: 15px;margin-left: 0px;line-height: 18px;padding-top: 0px;padding-right: 0px;padding-bottom: 0px;padding-left: 60px&quot;&gt;
  The &lt;code style=&quot;padding: 0px;margin: 0px&quot;&gt;address&lt;/code&gt; parameter sets the port you want the debugger to listen on.  Adding this line, will require you to restart Alfresco/tomcat for it to become active.
&lt;/p&gt;

&lt;p style=&quot;margin-top: 0px;margin-right: 0px;margin-bottom: 15px;margin-left: 0px;line-height: 18px;padding-top: 0px;padding-right: 0px;padding-bottom: 0px;padding-left: 60px&quot;&gt;
  On the client:
&lt;/p&gt;

&lt;p style=&quot;margin-top: 0px;margin-right: 0px;margin-bottom: 15px;margin-left: 0px;line-height: 18px;padding-top: 0px;padding-right: 0px;padding-bottom: 0px;padding-left: 60px&quot;&gt;
  Using standard port forwarding with ssh will enable Java debugging using plink
&lt;/p&gt;

&lt;p&gt;&lt;code style=&quot;margin-top: 0px;margin-right: 0px;margin-bottom: 15px;margin-left: 0px;line-height: 18px;padding-top: 0px;padding-right: 0px;padding-bottom: 0px;padding-left: 60px&quot;&gt;plink &amp;lt;user&amp;gt;@&amp;lt;ip/host/dns address&amp;gt; -L 2000:localhost:8082 -N&lt;/code&gt;&lt;/p&gt;

&lt;p style=&quot;margin-top: 0px;margin-right: 0px;margin-bottom: 15px;margin-left: 0px;line-height: 18px;padding-top: 0px;padding-right: 0px;padding-bottom: 0px;padding-left: 60px&quot;&gt;
  The debugger is then set to connect to &lt;code&gt;localhost&lt;/code&gt; using port &lt;code&gt;2000&lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;margin-top: 0px;margin-right: 0px;margin-bottom: 15px;margin-left: 0px;line-height: 18px;padding-top: 0px;padding-right: 0px;padding-bottom: 0px;padding-left: 30px&quot;&gt;
  For JMX:
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  On the server:
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  Modify &lt;code&gt;alfresco.sh&lt;/code&gt;:  set &lt;code&gt;-Dcom.sun.management.jmxremote&lt;/code&gt; equal to &lt;code&gt;true&lt;/code&gt;.  Append &lt;code&gt;-Djava.rmi.server.hostname=dummyhost&lt;/code&gt; to the &lt;code&gt;JAVA_OPTS&lt;/code&gt;.
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  Add &lt;code&gt;monitor.rmi.services.port=50508&lt;/code&gt; to &lt;code&gt;alfresco-global.properties&lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  On the client:
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  Add &lt;code&gt;127.0.0.1 dummyhost&lt;/code&gt; to &lt;code&gt;C:\Windows\System32\drivers\etc\hosts&lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  Using plink from the command line, run the following two commands:
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  &lt;code&gt;plink &amp;lt;user&amp;gt;@&amp;lt;ip/dns of server&amp;gt; -L 2001:localhost:50500 -N&lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  &lt;code&gt;plink &amp;lt;user&amp;gt;@&amp;lt;ip/dns of server&amp;gt; -L dummyhost:50508:localhost:50508 -N&lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  Now you can connect to Alfresco using a jmx console, like jconsole (ships with jre/jdk).
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  the connection string will look like this:
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  &lt;code&gt;service:jmx:rmi:///jndi/rmi://localhost:2001/alfresco/jmxrmi&lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  Unless you&amp;#8217;ve changed them, the default username and password are &lt;code&gt;controlRole&lt;/code&gt; and &lt;code&gt;change_asap&lt;/code&gt;
&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://jared.ottleys.net/alfresco/updated-tunneling-debug-and-jmx-for-alfresco&quot;&gt;UPDATED: Tunneling Debug and JMX for Alfresco&lt;/a&gt; was originally published by Jared Ottley at &lt;a href=&quot;http://jared.ottleys.net&quot;&gt;I exist as I am&lt;/a&gt; on June 11, 2010.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Alfresco: SimpleGIS]]></title>
  <link rel="alternate" type="text/html" href="http://jared.ottleys.net/alfresco/alfresco-simplegis" />
  <id>http://jared.ottleys.net/alfresco/alfresco-simplegis</id>
  <published>2010-05-31T00:00:00-06:00</published>
  <updated>2010-05-31T00:00:00-06:00</updated>
  <author>
    <name>Jared Ottley</name>
    <uri>http://jared.ottleys.net</uri>
    <email>jared@ottleys.net</email>
  </author>
  <content type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update:&lt;/strong&gt; Share in Alfresco 4.0 now supports google maps integration out of the box.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When I worked Pre-Sales here at [Alfresco][1] I had, on occasion, the chance to talk about integrating Alfresco with a [GIS (G][2][eographic Information System)][2]. I don’t have a lot of experience with these types of systems (actually none) but I always believed that integration was possible. (It falls into one of those categories where we believe that it is possible, but we have never actually seen it done.) Or even that a simple type of integration could be done with [Google Maps][3] to provide basic information.&lt;/p&gt;

&lt;p&gt;I started playing with the Google Maps APIs almost 6 months ago and was able to throw together a rough POC, but felt that there was still more that I could do.  I’ve gotten closer to what I envisioned and a have put together a starting example, but there is still a lot of work to do, including working around issues from the underlying APIs. (ie one of my examples will not work in some versions of Firefox or IE…I’m working on these, but believe that the answer may actually be in the code of either the browser or the Maps API.)&lt;/p&gt;

&lt;p&gt;You should note that my example is based off of US addresses.  If you are outside of the US you may need to customize these further to meet your needs, but the underlying code should work fine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Content Map&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My first attempt, used an aspect to contain the address. The fields I looked at are: address, city, state and zip code. Any of these, or any combination of these, can be passed to Google to get the coordinates. In this release, I’ve stuck with this design with a little modification.  The map that is rendered for the document (as a presentation template in the document details page) uses a static google map.  This is quick and easy, it is basically an image tag that has several parameter passed as part of the src.  This approach works find for our simple content item map, but has some limitations, for example you can’t design it provide more in-depth information like the little pop up information windows.&lt;/p&gt;

&lt;p&gt;In both of these example maps (the document based map and the space map that we will discuss next) it requires some additional changes to the core Alfresco App.  I needed to do two things: make a call within my web script to an external resource, in this case Google Maps, to take an address turn it into map coordinates.  And have the presentation template call the web script.  With a little help from Yong Qu, I was able to address both of these.  For the first issue you can enable the ‘remote’ object in javaScript.  This is enabled by default for Alfresco Share, but not in Alfresco Explorer.  Yong has an easy to follow, [example on his blog][4], on how to do this.&lt;/p&gt;

&lt;p&gt;To use the remote object then, we make a simple set of calls like below:&lt;/p&gt;

&lt;pre style=&quot;padding-left: 30px&quot;&gt;uri = &quot;http://maps.google.com/maps/geo?q=&quot;+encodeURI(fullAddress)+&quot;&amp;amp;key=&quot;+key+&quot;&amp;amp;sensor=false&amp;amp;output=json&quot;

var connector = remote.connect(&quot;http&quot;);
var result = connector.call(uri);

var obj = eval(&quot;(&quot;+result+&quot;)&quot;);

coordinates = obj.Placemark[0].Point.coordinates[1]+&quot;,&quot;+obj.Placemark[0].Point.coordinates[0];&lt;/pre&gt;

&lt;p&gt;You should also note that the json that is returned to our call is returned as a string.  We will need to turn it into an javascript object to work with it by using the javaScript eval function.  Once we have done this, we can working on the json as a standard object.&lt;/p&gt;

&lt;p&gt;This object, remote, however us not enabled for use in presentation templates. So again, borrowing from Yong, I used YUI (which we ship and use in Alfresco) to allow me to make the call out to get the map, via web script.&lt;/p&gt;

&lt;p&gt;Our YUI code, again is pretty straight forward…make the call to the web script, set the returned code to be the html of a specified div tag:&lt;/p&gt;

&lt;pre style=&quot;padding-left: 30px&quot;&gt;&amp;lt;script src=&quot;/alfresco/yui/yahoo.js&quot; type=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;/alfresco/yui/event.js&quot; type=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;/alfresco/yui/connection.js&quot; type=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;

 var handleSuccess = function(o){
    var div = document.getElementById(&#39;mapping&#39;);
    div.innerHTML = o.responseText; }

var handleFailure = function(o){
    var div = document.getElementById(&#39;mapping&#39;);
    div.innerHTML = &quot;Map not available&quot;; }

var callback = {
 	  success: handleSuccess,
 	  failure: handleFailure,
 	  argument: {} }

var request = YAHOO.util.Connect.asyncRequest(&#39;GET&#39;, &#39;/alfresco/wcservice/map/workspace/SpacesStore/${document.id}&#39;, callback);
&amp;lt;/script&amp;gt;&lt;/pre&gt;

&lt;p&gt;We want to incude the js references as the beginning. This enables us to make successful calls to this script without the wrapper of our presentation template.&lt;/p&gt;

&lt;p&gt;Next, notice the url that we are calling, 1/ the call is relative to the application we are running. 2/We are using wcservice. This make it so that we are not prompted to login each time the web script is called.&lt;/p&gt;

&lt;p style=&quot;text-align: center&quot;&gt;
  &lt;img class=&quot;size-full wp-image-339 aligncenter&quot; src=&quot;http://jared.ottleys.net/files/2010/06/Screen-shot-2010-05-31-at-11.07.21-PM.png&quot; alt=&quot;Screen shot 2010-05-31 at 11.07.21 PM&quot; width=&quot;659&quot; height=&quot;266&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;As I mentioned above, this is the easer part especially since the hard parts were already thought out by Yong….&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Space Map&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For the second map, I initially wanted it to be a presentation template, with an amalgamation of spaces &amp;amp; content, on a single map.&lt;/p&gt;

&lt;p&gt;The static maps API is a not a fit here.  I wanted to have a map that allowed me not to just specify the location for each child in a space, but also display a limited set of specific information about that piece of content. ** Note:** This does mean that you may need to develop a specific “folder” based taxonomy to better organize content by location.&lt;/p&gt;

&lt;p&gt;As I said above, my original attempts here were to try and do everything in a presentation template.  It would make multiple calls through YUI to get coordinates for the children of the space.  But YUI here becomes the bottleneck, especially since, I could not find a way to pass information out of the YUI Connection Managers callbacks.  This greatly limits the design…and ends up nesting calls to a depth of &lt;em&gt;n&lt;/em&gt; as we loop through all of the children in a space.&lt;/p&gt;

&lt;p&gt;One way to overcome this would be to include in the model/aspect the coordinates. This would reduce the YUI calls to zero.  One problem with this approach would be the changes to address need to result in updates to those coordinates.  This can be achieved through a behavior, watching the onUpdateProperties method for changes on those nodes. So for this first attempt, I’ve decided to skip this.  I’ll revisit this in an upcoming revision to the code.&lt;/p&gt;

&lt;p&gt;I started my new web script by moving the logic that I worked on from the presentation template to this web script.  This was pretty straight forward.  We reused the remote object we enabled from before to pass our location (address string) back to Google.  I ignore 99% of what is returned in the json because what we are really after is the coordinates that we can pass to the Google Maps javaScript API.  I choose the javaScript API this time, because it allows me to create infoWindows where I can present the user with some basic metadata about the content along with links to either download or browse to the content.  I’m not much a UI designer so my poor attempts at layout are sure to make some squirm.&lt;/p&gt;

&lt;p&gt;One of the things that was useful in this approach was to pass javaScript Associative Arrays to Freemarker.  This allowed me to specify the properties that I wanted/needed directly from witha larger sequence of objects without needing use multiple loops.&lt;/p&gt;

&lt;p&gt;This was pretty straight forward:  I created an array in my controller.  At each element in the array, I created a new Array where I stored my values referenced by a key.  I could then in the FTL, start my list, and then reference each child by key name instead of looping again.&lt;/p&gt;

&lt;pre&gt;var big = new Array();

//some code that ends of looping over something
//take our properties/metadata stick them in an array

var _child = new Array();

_child[&quot;nodeID&quot;] = child.id;
_child[&quot;location&quot;] = _location;
_child[&quot;latitude&quot;] = _latlong[&quot;latitude&quot;];
_child[&quot;longitude&quot;] = _latlong[&quot;longitude&quot;];

.push(_child);
//end loop

model.big = big&lt;/pre&gt;

&lt;p&gt;Now in the ftl:&lt;/p&gt;

&lt;pre&gt;&amp;lt;#list big as b&amp;gt;

var _latlng${child_index} = new google.maps.LatLng(${child[&quot;latitude&quot;]},${child[&quot;longitude&quot;]});

&amp;lt;/#list&amp;gt;&lt;/pre&gt;

&lt;p&gt;When we query for the specific node we want to work with where the value we want to pass to the query is in the Associative Array, we need to first clean the variable up, then it will work without throwing an error:&lt;/p&gt;

&lt;pre&gt;&amp;lt;#assign ref = child[&quot;nodeID&quot;]&amp;gt;
&amp;lt;#list companyhome.childrenByLuceneSearch[&quot;ID:workspace\\:\\/\\/SpacesStore\\/${ref}&quot;] as _child&amp;gt;&lt;/pre&gt;

&lt;p style=&quot;text-align: center&quot;&gt;
  &lt;img class=&quot;size-full wp-image-340 aligncenter&quot; src=&quot;http://jared.ottleys.net/files/2010/06/Screen-shot-2010-06-01-at-1.26.00-AM.png&quot; alt=&quot;Screen shot 2010-06-01 at 1.26.00 AM&quot; width=&quot;750&quot; height=&quot;255&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In my design I planned to reuse to the same pattern of using YUI within the presentation template to make the call to the web script, however when attempting to write the generated javaScript to the div tag where the map was to be displayed, I was reminded that the javaScript was never executed. It was treated as a string.  It is possible to get around this by using the javaScript eval function to execute the script, but this means turning the content retuned into a big string with lots of escapes…This would kill one of my design choices of making it possible to make direct calls to the web script and have it return a map that could be embedded in different things or be used stand alone. It could also be a big performance hit depending on how often the looip was made. Now, I could go back and write into the content branches to turn areas of the web script ftl on and off as a big sting, but this would over complicate the ftl.  This lead to the simplest fallback: have the presentation template reference the web script as part of an iFrame.  This worked nicely, but it helped to highlight what I thought was an issue with using the eval function:  there is a bug in the newest release of the maps API:  it was also happening in the iFrame on IE and Firefox.  For the moment I’ll let the script stand, it does work in Safari and Chrome, but it leaves out the major browsers.&lt;/p&gt;

&lt;p style=&quot;text-align: center&quot;&gt;
  &lt;p style=&quot;text-align: center&quot;&gt;
    &lt;img class=&quot;size-full wp-image-341 aligncenter&quot; src=&quot;http://jared.ottleys.net/files/2010/06/Screen-shot-2010-06-01-at-1.26.52-AM.png&quot; alt=&quot;Screen shot 2010-06-01 at 1.26.52 AM&quot; width=&quot;772&quot; height=&quot;283&quot; /&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;How to use&lt;/strong&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    We are still a bit early for heavy use of our plug.  We need to work out a few caching issues, the display issues are IE and Firefox, and modification of core Alfresco configs.
  &lt;/p&gt;
  
  &lt;p&gt;
    For this initial release I won&amp;#8217;t provide an amp.  I&amp;#8217;m want people to know that they will need to dig into this to learn it and extended it.  I&amp;#8217;d also like to transfer this to be used in Share.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;a href=&quot;http://code.google.com/p/alfresco-simplegis/source/checkout&quot;&gt;The source code&lt;/a&gt; is available at the &lt;a href=&quot;http://code.google.com/p/alfresco-simplegis/&quot;&gt;Google Code Project &amp;#8212; alfresco-simplegis&lt;/a&gt;.
  &lt;/p&gt;
  
  &lt;p&gt;
    If you want to call the web scripts directly:
  &lt;/p&gt;
  
  &lt;p&gt;
    For the document map use: /map/{store_type}/{store_id}/{id}
  &lt;/p&gt;
  
  &lt;p&gt;
    For the Space map use: /map/coordinates/{store_type}/{store_id}/{id}
  &lt;/p&gt;
  
  &lt;p&gt;
    Both of these will require that the space/content have the mappable aspect applied along with at least the zipcode applied.
  &lt;/p&gt;
  
  &lt;p&gt;
    Spaces can control the default zoom level for their maps.  By default that value is 8.  You should adjust it based on your need.
  &lt;/p&gt;
  
  &lt;p&gt;
    Document maps are static: there is no zoom or pan.  Space maps support both zoom and pan.
  &lt;/p&gt;
  
  &lt;p&gt;
    &lt;strong&gt;What next?&lt;/strong&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    This project is still early in its development.  If you have ideas on how to overcome the Firefox or IE issues, your help would be appreciated.  I&amp;#8217;m also going to be tackling the &amp;#8220;caching&amp;#8221; issue shortly.  This seems to me to be a useful feature.  Along with a good understanding of how you can script behaviors for properties when they are updated.
  &lt;/p&gt;

 [1]: http://www.alfresco.com
 [2]: http://en.wikipedia.org/wiki/GIS
 [3]: http://code.google.com/apis/maps/
 [4]: http://drquyong.com/myblog/?p=49
&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://jared.ottleys.net/alfresco/alfresco-simplegis&quot;&gt;Alfresco: SimpleGIS&lt;/a&gt; was originally published by Jared Ottley at &lt;a href=&quot;http://jared.ottleys.net&quot;&gt;I exist as I am&lt;/a&gt; on May 31, 2010.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Web Script: Modified Content List]]></title>
  <link rel="alternate" type="text/html" href="http://jared.ottleys.net/alfresco/web-script-modified-content-list" />
  <id>http://jared.ottleys.net/alfresco/web-script-modified-content-list</id>
  <published>2010-05-17T00:00:00-06:00</published>
  <updated>2010-05-17T00:00:00-06:00</updated>
  <author>
    <name>Jared Ottley</name>
    <uri>http://jared.ottleys.net</uri>
    <email>jared@ottleys.net</email>
  </author>
  <content type="html">&lt;p&gt;For a recent customer engagement I was asked to write a web script which they’ve agreed to let me share.&lt;/p&gt;

&lt;p&gt;The script was written to give them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A list of content that had been modified from a point in time until “now” (The time of execution).&lt;/li&gt;
  &lt;li&gt;Specify a specific space or recurse the child spaces for the named space.&lt;/li&gt;
  &lt;li&gt;return a specified XML structure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In preparing for this post I’ve added some modifications/fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I’ve added two new return formats: JSON and HTML&lt;/li&gt;
  &lt;li&gt;fixed an issue that allows it to run on the 3.2.x release of Alfresco.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are some insights to a few areas of the script:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lucene Date Queries&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are two specific things to remember about Date queries:&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;strong&gt;1 &amp;#8211; Date Format.&lt;/strong&gt; Date queries with Lucene are  looking for the date in an I&lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601&quot;&gt;SO8601&lt;/a&gt; format using &lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations&quot;&gt;combined date and time &lt;/a&gt;in &lt;a href=&quot;http://en.wikipedia.org/wiki/UTC&quot;&gt;UTC&lt;/a&gt;.  (Even if you are looking just for the date it will complain if you don&amp;#8217;t pass the time ).
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  To do this I had originally used  the JavaScript Date prototype from &lt;a href=&quot;http://delete.me.uk/2005/03/iso8601.html&quot;&gt;http://delete.me.uk/2005/03/iso8601.html&lt;/a&gt;. This works fine in pre 3.2 releases.  But due to a &lt;a href=&quot;https://issues.alfresco.com/jira/browse/ETHREEOH-2760&quot;&gt;change in the 3.2 code line&lt;/a&gt; top level objects are now sealed which means you can&amp;#8217;t make these type of prototype change to Root level objects in the JavaScript libraries. So I&amp;#8217;ve made simple modification to Date prototype code allowing me to pass a Date Object into the code which then does the coversion and returns a properly formated ISO8601 string.
&lt;/p&gt;

&lt;pre style=&quot;padding-left: 30px&quot;&gt;function toISO8601String(date) { // based on http://delete.me.uk/2005/03/iso8601.html
	/*
	 * accepted values for the format [1-6]: 1 Year: YYYY (eg 1997) 2 Year and
	 * month: YYYY-MM (eg 1997-07) 3 Complete date: YYYY-MM-DD (eg 1997-07-16) 4
	 * Complete date plus hours and minutes: YYYY-MM-DDThh:mmTZD (eg
	 * 1997-07-16T19:20+01:00) 5 Complete date plus hours, minutes and seconds:
	 * YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00) 6 Complete date
	 * plus hours, minutes, seconds and a decimal fraction of a second
	 * YYYY-MM-DDThh:mm:ss.sTZD (eg 1997-07-16T19:20:30.45+01:00)
	 */
	if (!format) {
		var format = 6;
	}
	if (!offset) {
		var offset = &#39;Z&#39;;
		var date = date;
	} else {
		var d = offset.match(/([-+])([0-9]{2}):([0-9]{2})/);
		var offsetnum = (Number(d[2]) * 60) + Number(d[3]);
		offsetnum *= ((d[1] == &#39;-&#39;) ? -1 : 1);
		var date = new Date(Number(Number(date) + (offsetnum * 60000)));
	}

	var zeropad = function(num) {
		return ((num &amp;lt; 10) ? &#39;0&#39; : &#39;&#39;) + num; 	}

 	var str = &quot;&quot;;
 	str += date.getUTCFullYear(); 	if (format &amp;gt; 1) {
		str += &quot;-&quot; + zeropad(date.getUTCMonth() + 1);
	}
	if (format &amp;gt; 2) {
		str += &quot;-&quot; + zeropad(date.getUTCDate());
	}
	if (format &amp;gt; 3) {
		str += &quot;T&quot; + zeropad(date.getUTCHours()) + &quot;:&quot;
				+ zeropad(date.getUTCMinutes());
	}
	if (format &amp;gt; 5) {
		var secs = Number(date.getUTCSeconds() + &quot;.&quot;
				+ ((date.getUTCMilliseconds() &amp;lt; 100) ? &#39;0&#39; : &#39;&#39;)&lt;/pre&gt;

&lt;pre style=&quot;padding-left: 30px&quot;&gt;+ zeropad(date.getUTCMilliseconds()));&lt;/pre&gt;

&lt;pre style=&quot;padding-left: 30px&quot;&gt;str += &quot;:&quot; + zeropad(secs);&lt;/pre&gt;

&lt;pre style=&quot;padding-left: 30px&quot;&gt;} else if (format &amp;gt; 4) {
		str += &quot;:&quot; + zeropad(date.getUTCSeconds());
	}

	if (format &amp;gt; 3) {
		str += offset;
	}
	return str;
}&lt;/pre&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  I&amp;#8217;ve turned the original prototyping into a function, where I pass a Date object, with the date I want to work with, into this function. I also replaced any reference to &amp;#8216;this&amp;#8217; with that data parameter.  I will admit there is some excess code here that may never be called. But this was the quickest change to accomplish what I needed.
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;strong&gt;2 &amp;#8211; Only dates are indexed.&lt;/strong&gt; By default, only the date portion of the property is indexed.  In general, most use cases only require the date .  But in this case, the customer was interested in what may have changed over the period of an hour.
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  There are two options for this: Code around or modify how Alfresco indexes these DateTime properties. In this case I choose to code around it.  This means that I am not modifying default behavior in Alfresco&amp;#8230;always a plus.
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  &lt;strong&gt;Code Around.&lt;/strong&gt; We have all the pieces we need to do this: We know the datetime we use for the start and end our range query.  We also have access to the full datetime property (even if it wasn&amp;#8217;t indexed).
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  I chose to pull this into a function that takes the collection (array) of documents found in our range query and then test to see if the datetime property of the node (in this case the modified datetime property) is between our the beginning and end of our range, if so then add it to our new filtered results array.
&lt;/p&gt;

&lt;pre style=&quot;padding-left: 60px&quot;&gt;function filterResults(unfilteredResults) {
	var now = new Date();
	var filteredResults = new Array();

	for each (node in unfilteredResults) {

		var testDate = new Date(node.properties.modified);

		//if the nodes modified date is between the passed date/time and now add
		//to filteredResult Array
		if ((filterDate &amp;lt;= testDate) &amp;amp;&amp;amp; (testDate &amp;lt;= now)){
			filteredResults.push(node);
		}
	}

	return filteredResults;
}&lt;/pre&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  This is clean and simple.
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  &lt;strong&gt;Modify Alfresco.&lt;/strong&gt; While this sounds heavy, it actually isn&amp;#8217;t.  Our support team pointed me at &lt;a href=&quot;http://forums.alfresco.com/en/viewtopic.php?f=4&amp;amp;t=9122&quot;&gt;this forum post&lt;/a&gt; in which &lt;a href=&quot;http://twitter.com/andy_hind/&quot;&gt;Andy Hind&lt;/a&gt; from our engineering team shows us how to change the default behaviour:
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  In dataTypeAnalyzers.properties (located inside the war file in WEB-INF/classes/alfresco/model) change:
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  d_dictionary.datatype.d_datetime.analyzer=org.alfresco.repo.search.impl.lucene.analysis.DateAnalyser
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  to
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  d_dictionary.datatype.d_datetime.analyzer=org.alfresco.repo.search.impl.lucene.analysis.DateTimeAnalyser
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  Now rebuild your indexes.  Depending on the amount of content in your repository it this may take some time.  It may also not be possible to make this immediate because the  SLA you have with your customers won&amp;#8217;t permit it until you have scheduled maintenance downtime. (HA Clustering is helpful in these situations.)
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;System Folders&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One thing that may show up in these queries are system folders.  These folders contain any of the rules that may be associated with a space.  In most queries these folders and their content has no value, so we want to exclude them.&lt;/p&gt;

&lt;p&gt;This string can be appended to your query string to exclude them:&lt;/p&gt;

&lt;pre style=&quot;padding-left: 30px&quot;&gt;var systemFolder = &quot;-TYPE:\&quot;cm:systemfolder\&quot; &quot; +
		&quot;-TYPE:\&quot;{http://www.alfresco.org/model/rule/1.0}rule\&quot; &quot; +
		&quot;-TYPE:\&quot;{http://www.alfresco.org/model/action/1.0}compositeaction\&quot; &quot; +
		&quot;-TYPE:\&quot;{http://www.alfresco.org/model/action/1.0}actioncondition\&quot; &quot; +
		&quot;-TYPE:\&quot;{http://www.alfresco.org/model/action/1.0}action\&quot; &quot; +
		&quot;-TYPE:\&quot;{http://www.alfresco.org/model/action/1.0}actionparameter\&quot;&quot;;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;PARENT vs PATH&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When we are performing queries for content within a space we have a couple of options.  Two of the most common are PARENT and PATH.&lt;/p&gt;

&lt;p&gt;PARENT queries work directly on a space. No recursion. It will return all of the nodes (spaces and content) in that space.  In other words, PARENT queries work directly on a space without recursion. It will return all of the nodes (spaces and content) in that space alone, but will not return any nodes (spaces and content) that are in sub-spaces of that space.&lt;/p&gt;

&lt;p&gt;PATH queries are a subset of XPATH.  They are eagerly evaluated.  Thus they can be memory (Caching) and CPU intensive. They are useful if you want more than what is just in the space you are working, may not know the location of the space, or if a space of that name may exist in multiple locations.&lt;/p&gt;

&lt;p&gt;Be smart in your choice.  Use PARENT as often as possible.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note For Java extensions:&lt;span style=&quot;font-style: normal&quot;&gt; u&lt;/span&gt;&lt;span style=&quot;font-style: normal&quot;&gt;nless the other clauses in your query are complex, it’s likely more efficient to enumerate (list / ls / dir) a space using the FileFolderService rather than a Lucene query. &lt;/span&gt;&lt;/em&gt;ie. a simple query of the form “PARENT:[noderef]” would be better implemented using FileFolderService.list()&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-style: normal&quot;&gt;OK, enough about some of our design decisions let’s talk about how to use the web script.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;strong&gt;Install&lt;/strong&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-style: normal&quot;&gt;The web script is packaged in an amp file.  It will work on Alfresco 3.1.1 and newer versions. (I tested up to Alfresco 3.2r) The &lt;a href=&quot;http://code.google.com/p/alfresco-modified-content-list/downloads/detail?name=alfresco-updatedcontent-webscript.amp&quot;&gt;alfresco-modified-content-list amp&lt;/a&gt; and &lt;a href=&quot;http://code.google.com/p/alfresco-modified-content-list/source/checkout&quot;&gt;the source&lt;/a&gt; can be found on the &lt;a href=&quot;http://code.google.com/p/alfresco-modified-content-list/&quot;&gt;google code project site&lt;/a&gt;. Use the apply_amps script appropriate for your OS.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use it&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The web script can be called using:&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  http://localhost:8080/alfresco/service/updated/in/{path}/since?date=01/01/2010 13:10:10
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  http://localhost:8080/alfresco/service/updated/{path}/since?date=01/01/2010 13:10:10
&lt;/p&gt;

&lt;p&gt;There is a slight difference in the two URLs: ‘in’&lt;/p&gt;

&lt;p&gt;The ‘in’ allows you to tell the web script to just list the content in the space passed in the path parameter. Without the ‘in’ the web script will recurse the space structure from the passed path parameter down.&lt;/p&gt;

&lt;p&gt;Next, the DateTime structure is not fixed:  Possible (tested) formats are&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  mm/dd/yyyy
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  yyyy/mm/dd
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  mm/dd/yyyy hh:mm:ss
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  yyyy/mm/dd hh:mm:ss
&lt;/p&gt;

&lt;p&gt;The hh is expecting a 24 hour clock format.  And millisecond and timezone tests are not supported&lt;/p&gt;

&lt;p&gt;The query tests against the modified datetime property of the content.  (Fairly easy to change it and test against the created property or any other custom metadata DataTime property.)&lt;/p&gt;

&lt;p&gt;There are three return formats: XML (the default), JSON and HTML.&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;strong&gt;XML&lt;/strong&gt; The XML format is a simple structure that returns back the name of the file, the path to the file and the modification date. It is also the default format returned.
&lt;/p&gt;

&lt;pre style=&quot;padding-left: 30px&quot;&gt;&amp;lt;contentItems&amp;gt;
	&amp;lt;contentItem name=&#39;simple.doc&#39; path=&#39;/Company Home/test/Portal&#39; modDate=&#39;2010-04-26T16:21:20.612-06:00&#39;/&amp;gt;
	&amp;lt;contentItem name=&#39;simpledraft.docx&#39; path=&#39;/Company Home/test/Portal&#39; modDate=&#39;2010-04-26T16:28:44.569-06:00&#39;/&amp;gt;
&amp;lt;/contentItems&amp;gt;&lt;/pre&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  If there is no modified content a simple &lt;span style=&quot;font-family: Consolas, Monaco, &#39;Courier New&#39;, Courier, monospace;line-height: 18px;font-size: 12px&quot;&gt;&lt;contentitems /&gt; &lt;/span&gt;is returned.
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;strong&gt;JSON &lt;/strong&gt;The JSON object is somewhat similar, a modified object containing a collection of node objects is returned
&lt;/p&gt;

&lt;pre style=&quot;padding-left: 30px&quot;&gt;{ &quot;modified&quot;: [
              { &quot;node&quot;: {
                         &quot;name&quot;: &quot;test3.txt&quot;, &quot;path&quot;: &quot;some/path&quot;,&quot;modified&quot;: &quot;2010-03-17T00:05:43.311-06:00&quot;
                        }
              },
              { &quot;node&quot;: {
                        &quot;name&quot;: &quot;test2.txt&quot;, &quot;path&quot;: &quot;some/path&quot;,&quot;modified&quot;: &quot;2010-03-17T15:07:30.301-06:00&quot;
                        }
              }
              ]
    }&lt;/pre&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;strong&gt;HTML&lt;/strong&gt; This final format is more for testing than actual production use.  It returns a simple html page with a list of modified items. It displays a simple unordered list, where each item is a csv list with key and values seperated by colons.
&lt;/p&gt;

&lt;p&gt;In all of these return formats, the freemaker template processes the returned scriptNodes for a simple collection.  This makes it easy to extend the return with the returned nodes properties to include things like nodeRef, creation date, node icons, download url, etc.&lt;/p&gt;

&lt;p&gt;If you have suggestions for improvements or questions please feel free to comment here or on the google project.  As always I’m willing to open access to the project to those will to help improve the code.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://jared.ottleys.net/alfresco/web-script-modified-content-list&quot;&gt;Web Script: Modified Content List&lt;/a&gt; was originally published by Jared Ottley at &lt;a href=&quot;http://jared.ottleys.net&quot;&gt;I exist as I am&lt;/a&gt; on May 17, 2010.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Search&#8217;d: How do I enable the Sharepoint Protocol]]></title>
  <link rel="alternate" type="text/html" href="http://jared.ottleys.net/alfresco/searchd-how-do-i-enable-the-sharepoint-protocol" />
  <id>http://jared.ottleys.net/alfresco/searchd-how-do-i-enable-the-sharepoint-protocol</id>
  <published>2010-03-08T00:00:00-07:00</published>
  <updated>2010-03-08T00:00:00-07:00</updated>
  <author>
    <name>Jared Ottley</name>
    <uri>http://jared.ottleys.net</uri>
    <email>jared@ottleys.net</email>
  </author>
  <content type="html">&lt;p&gt;&lt;em&gt;This is part of the Search’d series.  Topics are taken from Search Engine keyword searches.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This second post is coming a bit late, but it is finally here.  I’ve been getting ready for our World Wide Sales Kickoff. We will be kicking off our new fiscal year with great sessions for our worldwide group of &lt;a href=&quot;http://www.alfresco.com/partners/&quot;&gt;partners&lt;/a&gt;. I’ll be presenting with two of my EMEA colleagues on Scaling Alfresco.  I’ve chosen to tackle scaling our WCM product.  It might even turn into some great information for a post or two here.&lt;/p&gt;

&lt;p&gt;This weeks topic is one of the most popular searches that has lead to this blog: How do I enable the Sharepoint Protocol in Alfresco.  At the outset let me tell you: I’m not going to explain how to actually configure the Sharepoint Services in this post, rather I want to point you to resource that take you through all of the steps of enabling the Sharepoint Protocol in Alfresco and how to use it.  These are often over looked resources, but resources that can be really useful.&lt;/p&gt;

&lt;p&gt;The first resource is the &lt;a href=&quot;http://wiki.alfresco.com/w/images/6/62/Installing_and_Configuring_Alfresco_ECM_Community_Edition_3_2_r2.pdf&quot;&gt;Installing and Configuring Alfresco Community Edition&lt;/a&gt; guide found on the &lt;a href=&quot;http://wiki.alfresco.com/wiki/Download_Community_Edition&quot;&gt;Alfresco Community Download&lt;/a&gt; page (or on the &lt;a href=&quot;http://share.alfresco.com/share/page/site/community/dashboard&quot;&gt;Alfresco Content Community Site&lt;/a&gt; [registration required] in the &lt;a href=&quot;http://share.alfresco.com/share/page/site/community/documentlibrary&quot;&gt;Document Library&lt;/a&gt; under Documentation in the Installation and Configuration folder for your installed release of Alfresco Community.  This guide covers the basics of setting up and runningg Alfresco Community (It is also a preview of the documentation available as part of an &lt;a href=&quot;http://www.alfresco.com/services/subscription/&quot;&gt;Alfresco Enterprise Subscription&lt;/a&gt; in the &lt;a href=&quot;http://network.alfresco.com&quot;&gt;Alfresco Network&lt;/a&gt; site [&lt;a href=&quot;http://www.alfresco.com/about/contact/&quot;&gt;Alfresco Enterprise Subscription Required&lt;/a&gt;].)  You’ll find instructions for setting up and configuring Alfresco Sharepoint Services (on the server side) starting on the bottom of page 26.&lt;/p&gt;

&lt;p&gt;The second resource covers using the Sharepoint Extension in Microsoft Office: &lt;a href=&quot;http://share.alfresco.com/share/page/site/community/document-details?nodeRef=workspace://SpacesStore/c655e820-c926-4332-8ce0-9571fc239170&quot;&gt;Managing Alfresco Content from within MS Office Community Edition&lt;/a&gt;. (Requires Registration).  This is also found in the &lt;a href=&quot;http://share.alfresco.com/share/page/site/community/dashboard&quot;&gt;Alfresco Content Community Site&lt;/a&gt; [registration required] in the &lt;a href=&quot;http://share.alfresco.com/share/page/site/community/documentlibrary&quot;&gt;Document Library&lt;/a&gt; but in the Tutorials folder.&lt;/p&gt;

&lt;p&gt;These documents as well as others for using Share, Web Content Management, Document Management and Records Management can be found in the Content Community Site. You’ll also find presentations from past Community Conferences, Case Studies, White Papers and Webinars.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://jared.ottleys.net/alfresco/searchd-how-do-i-enable-the-sharepoint-protocol&quot;&gt;Search&#8217;d: How do I enable the Sharepoint Protocol&lt;/a&gt; was originally published by Jared Ottley at &lt;a href=&quot;http://jared.ottleys.net&quot;&gt;I exist as I am&lt;/a&gt; on March 08, 2010.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Search&#8217;d: How do I disable Alfresco Share]]></title>
  <link rel="alternate" type="text/html" href="http://jared.ottleys.net/alfresco/searchd-how-do-i-disable-alfresco-share" />
  <id>http://jared.ottleys.net/alfresco/searchd-how-do-i-disable-alfresco-share</id>
  <published>2010-02-26T00:00:00-07:00</published>
  <updated>2010-02-26T00:00:00-07:00</updated>
  <author>
    <name>Jared Ottley</name>
    <uri>http://jared.ottleys.net</uri>
    <email>jared@ottleys.net</email>
  </author>
  <content type="html">&lt;p&gt;I’ve always found it fascinating what people searched for to find my blog.  And more fascinating why my blog even came up in the results!  The idea occurred to me that there were actually some meaningful questions in those searches. Yes, it was like one of those Windows 7 epiphanies.  I’m going to start a new weekly (cross your fingers) series based on those search terms. New posts will come every Friday and will incorporate some facet of the search terms that brought people to this blog.  The post size will vary based on the question and the technical depth it may require.  Hopefully, this can prove to be valuable. I’ll also add a pitch here for &lt;a href=&quot;http://www.alfresco.com/services/consulting/&quot;&gt;Alfresco Professional Services&lt;/a&gt; — bread on the table, mouths to feed and all — we offer the in-depth knowledge you need to help with your &lt;a href=&quot;http://www.alfresco.com/services/subscription/&quot;&gt;Alfresco Enterprise Subscription&lt;/a&gt;. So without further ado….I give you: Search’d&lt;/p&gt;

&lt;p&gt;Today’s search terms came in as “alfresco start up disable share studio”.  For most Java Developers who have worked with Java application servers this will be pretty simple — you may even want to find something else to do now.  For those new to Java or not even in the market to learn, it will not be.  But the answer is pretty simple, but first some background…..&lt;/p&gt;

&lt;p&gt;Java based applications can be packaged into several different formats. Typically you will find JARs and WARs.  In some circumstances they are packaged in other formats as well…RARs and EARs being the most common.  We at Alfresco like to use AMPs (which may or may not actually include Java code) to manager extensions to Alfresco.  These archives are zip files with specific file layouts. Go ahead, take a copy of the alfresco.war file and open it with a archive manager that understands zip.  It won’t hurt.&lt;/p&gt;

&lt;p&gt;Now, if you downloaded Alfresco as one of the full blown installers or as a bundle with tomcat, go ahead and run the installer or unpackaged the archive.  Once that is done navigate down into the tomcat/webapps directory.  In there you will see a few directories and a couple of files with the extension .war (alfresco.war, share.war, mobile.war (Community only), studio.war (Community only)).  To disable any of these simply remove the war file or rename it by anding a new/additional extension.  I like to add the extension .off, which lets me clearly see that this part of Alfresco is — off.  Removing the war files also may seem a bit brute force and unless you are really desperate for the space it won’t hurt anything to leave them.  This is my preferred approach.  If you ever want to add that part of Alfresco back, just remove the extension and restart Alfresco.&lt;/p&gt;

&lt;p&gt;If you have already started Alfresco you will see directories that match the name of the war file.  You will also need to remove those directories. (Don’t forget to restart Alfresco after removing those directories).&lt;/p&gt;

&lt;p&gt;It’s as simple as that.&lt;/p&gt;

&lt;p&gt;**Q:  Is there ever a case where I would disable  the Alfresco application? **Yes.  If you are using Alfresco Share, you can add a bit of scale to your deployment by having Share installed on another server.  It does require some additional configuration, but we won’t cover that today.&lt;/p&gt;

&lt;p&gt;**Q: I just removed &lt;strong&gt;_\&lt;em&gt;_.war!  Or I just removed the ___&lt;/em&gt;&lt;/strong&gt; directory! How do I get it back? **For basic out of the box installs, stop Alfresco and simply grab the war file from the &lt;a href=&quot;http://wiki.alfresco.com/wiki/Download_Community_Edition&quot;&gt;Alfresco Community Page&lt;/a&gt; or &lt;a href=&quot;http://network.alfresco.com&quot;&gt;Alfresco Network&lt;/a&gt; (versions must match) and copy it back into the webapps directory.  If you have added extensions via AMPs to your war files, reapply the amps to the new war file. Restart Alfresco.  For the case where you deleted an expanded directory, with the war files in place, restart Alfresco and they will be deployed again.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://jared.ottleys.net/alfresco/searchd-how-do-i-disable-alfresco-share&quot;&gt;Search&#8217;d: How do I disable Alfresco Share&lt;/a&gt; was originally published by Jared Ottley at &lt;a href=&quot;http://jared.ottleys.net&quot;&gt;I exist as I am&lt;/a&gt; on February 26, 2010.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Alfresco PDF Toolkit]]></title>
  <link rel="alternate" type="text/html" href="http://jared.ottleys.net/alfresco/alfresco-pdf-toolkit" />
  <id>http://jared.ottleys.net/alfresco/alfresco-pdf-toolkit</id>
  <published>2010-02-25T00:00:00-07:00</published>
  <updated>2010-02-25T00:00:00-07:00</updated>
  <author>
    <name>Jared Ottley</name>
    <uri>http://jared.ottleys.net</uri>
    <email>jared@ottleys.net</email>
  </author>
  <content type="html">&lt;p&gt;A few weeks ago I made my first release of what I am calling the &lt;a href=&quot;http://code.google.com/p/alfresco-pdf-toolkit/&quot; target=&quot;_blank&quot;&gt;Alfresco PDF Toolkit&lt;/a&gt; on &lt;a href=&quot;http://code.google.com&quot; target=&quot;_blank&quot;&gt;Google Code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Alfresco PDF Toolkit, or as I originally named it, &lt;a href=&quot;http://svn.ottleys.net/public/alfresco/pdf-extension/&quot; target=&quot;_blank&quot;&gt;pdf-extension&lt;/a&gt;, has been around for a while.  It was originally hosted on &lt;a href=&quot;http://svn.ottleys.net/public&quot;&gt;my SVN server&lt;/a&gt; and in then in &lt;a href=&quot;http://svn.ottleys.net/alfresco&quot; target=&quot;_blank&quot;&gt;my Alfresco SVN Repo&lt;/a&gt;.  It was developed as a one-off side project at the request of an early Alfresco customer.  The code has been sitting around with very few updates since that time.  An occasional rebuild to make sure it would work with a new release of Alfresco but that was it. (I think it was original built for 2.1 or 2.2)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why the update?&lt;/strong&gt; Focused attention.  It is a way to get my hands dirty and adding some new features that have been rattling around in my head for a while now.&lt;/p&gt;

&lt;p&gt;**What can it do? **This initial release has three functions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Split PDF — This option allows you to split a PDF every specified number of pages&lt;/li&gt;
  &lt;li&gt;Split at Page — This option allows you to split a PDF at a specified page&lt;/li&gt;
  &lt;li&gt;Merge PDF — This options allows you to append a PDF to another PDF&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All three options generate new PDFs leaving the originals untouched.&lt;/p&gt;

&lt;p&gt;**Where can I find these actions? **The actions are available in the Run Action Wizard.  They use the same names as above.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does the future hold?&lt;/strong&gt; The current list of enhancements is as follows (bot not necessarily in this order):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PDF Watermarks / Rubber stamping&lt;/li&gt;
  &lt;li&gt;Digital Signatures&lt;/li&gt;
  &lt;li&gt;TIFF to PDF transformation&lt;/li&gt;
  &lt;li&gt;Extract Pages&lt;/li&gt;
  &lt;li&gt;Delete Pages&lt;/li&gt;
  &lt;li&gt;Transform to PDF/A&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Can I help?&lt;/strong&gt; Yes!  I’m more than happy to accept code contributions or add features the list of enhancements.  And of course, merit can make you a contributor.&lt;/p&gt;

&lt;p&gt;**Where can I find the code or the AMP again? **In the Google Code Project: &lt;a href=&quot;http://code.google.com/p/alfresco-pdf-toolkit/&quot;&gt;Alfresco PDF Toolkit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;*Note: **&lt;/strong&gt;This is NOT an officially supported Alfresco Project. *&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://jared.ottleys.net/alfresco/alfresco-pdf-toolkit&quot;&gt;Alfresco PDF Toolkit&lt;/a&gt; was originally published by Jared Ottley at &lt;a href=&quot;http://jared.ottleys.net&quot;&gt;I exist as I am&lt;/a&gt; on February 25, 2010.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Alfresco WCM Forms: Unique Identifier]]></title>
  <link rel="alternate" type="text/html" href="http://jared.ottleys.net/alfresco/alfresco-wcm-forms-unique-identifier" />
  <id>http://jared.ottleys.net/alfresco/alfresco-wcm-forms-unique-identifier</id>
  <published>2010-02-24T00:00:00-07:00</published>
  <updated>2010-02-24T00:00:00-07:00</updated>
  <author>
    <name>Jared Ottley</name>
    <uri>http://jared.ottleys.net</uri>
    <email>jared@ottleys.net</email>
  </author>
  <content type="html">&lt;p&gt;From time to time I’ve seen the need to provide a unique identifier in content created through the Alfresco WCM Forms Service.  The reason why has varied from needing an unique identifier across renditions to needing a way to tie the content to User Generated Content (UGC) or some other database managed application. A simple solution is to leverage Java generated [Universally Unique Identifiers][1] (UUID) imported into the [Schema Definition of your form][2] via a [Java Backed Web Script][3]. **Note: **These are not the UUIDs used by Alfresco DM.  UUIDs are not available/part of the AVM/WCM model used by Alfresco.&lt;/p&gt;

&lt;p&gt;Java Backed Web Scripts provide a powerful way to include complex business process logic, enabling integrations through the [Alfresco Web Script framework][4] using a simple HTTP based API.  In this case, we are using a simple Java class to generate a UUID and then returning that UUID wrapped in a XML Scheme Definition imported through a &lt;xs:include&gt; into a Schema Definition used to generate a form used to capture content in Alfresco&amp;#8217;s WCM service.&lt;/xs:include&gt;&lt;/p&gt;

&lt;p&gt;First let’s tackle the Java portion.  This is a simple Java class that extends the Alfresco [DeclarativeWebScript][5] class. A Declarative Web Script allows you to mix Java classes, Freemarker templates (FTL) and Javascript.  In this case we a want to leverage a FTL, which generates the XSD for the return.  Here is the meat of our class:&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;public class UUIDWebScript extends DeclarativeWebScript&amp;lt;br /&amp;gt;
{&lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  &lt;code&gt;@Override&amp;lt;br /&amp;gt;
protected Map executeImpl(WebScriptRequest req,&amp;lt;br /&amp;gt;
Status status, Cache cache)&amp;lt;br /&amp;gt;
{&lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;padding-left: 90px&quot;&gt;
  &lt;code&gt; Map model = new HashMap();&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;`&amp;lt;/p&amp;gt;
&amp;lt;p style=&quot;padding-left: 90px&quot;&amp;gt;UUID uuid = UUID.randomUUID();&amp;lt;/p&amp;gt;
&amp;lt;p style=&quot;padding-left: 90px&quot;&amp;gt;model.put(“uuid”, uuid.toString());&amp;lt;/p&amp;gt;
&amp;lt;p style=&quot;padding-left: 90px&quot;&amp;gt;return model;&amp;lt;/p&amp;gt;
&amp;lt;p style=&quot;padding-left: 60px&quot;&amp;gt;}&amp;lt;/p&amp;gt;&lt;/p&gt;
&lt;p&gt;`

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;}&lt;/code&gt;
&lt;/p&gt;

Basically,

*   Create a `map` of properties you want to return (by coding conventions this is called a model).
*   Perform your business logic, in our case generate a UUID.
*   Add the values you want to return to the template with a unique name to identify it in the template
*   Return the map of properties

Next we want to format our return.  This is done using a Freemarker Template . ([Freemarker][6] is a Java Based markup language.) Here is ours:

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt; &amp;lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&amp;lt;br /&amp;gt;
xmlns:alfresco=&quot;http://www.alfresco.org/alfresco&quot;&amp;lt;br /&amp;gt;
elementFormDefault=&quot;qualified&quot;&amp;gt;&lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  &lt;code&gt;&amp;lt;xs:complexType name=&quot;uuid&quot;&amp;gt;&lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;padding-left: 90px&quot;&gt;
  &lt;code&gt;&amp;lt;xs:sequence&amp;gt;&lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;padding-left: 120px&quot;&gt;
  &lt;code&gt; &amp;lt;xs:element name=&quot;uuid&quot; fixed=&quot;${uuid}&quot; type=&quot;xs:normalizedString&quot;/&amp;gt;&lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;padding-left: 90px&quot;&gt;
  &lt;code&gt; &amp;lt;/xs:sequence&amp;gt;&lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  &lt;code&gt; &amp;lt;/xs:complexType&amp;gt;&lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt; &lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;&amp;lt;/xs:schema&amp;gt;&amp;lt;br /&amp;gt;
&lt;/code&gt;
&lt;/p&gt;

The FTL, as you can see , is a simple XSD.  The value returned from our Java class, in the model, named uuid, is declared as ${uuid}.

Now let&amp;#8217;s declare the web script so that it can be registered in Alfresco:

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;&amp;lt;webscript&amp;gt;&lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;padding-left: 60px&quot;&gt;
  &lt;code&gt; &amp;lt;shortname&amp;gt;Generate UUID&amp;lt;/shortname&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;description&amp;gt;Returns a UUID&amp;lt;/description&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;url&amp;gt;/util/uuid&amp;lt;/url&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;authentication&amp;gt;none&amp;lt;/authentication&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;format default=&quot;xml&quot;&amp;gt;argument&amp;lt;/format&amp;gt;&lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt; &amp;lt;/webscript&amp;gt;&lt;/code&gt;
&lt;/p&gt;

And since we are using a Java class in our Web Script, we also need to declare it so that the Web Script framework can use it:

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;&amp;lt;br /&amp;gt;
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&amp;lt;br /&amp;gt;
xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&amp;gt;&lt;/code&gt;
&lt;/p&gt;

`&lt;/p&gt;
&lt;p style=&quot;padding-left: 60px&quot;&gt;&amp;lt;bean id=&quot;webscript.org.alfresco.extension.uuid.uuid.get&quot;&lt;br /&gt;
class=&quot;org.alfresco.extension.uuid.UUIDWebScript&quot;&lt;br /&gt;
parent=&quot;webscript&quot;&amp;gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;`

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;&amp;lt;/beans&amp;gt;&lt;/code&gt;
&lt;/p&gt;

It is important to note here that the bean id for a Java backed Web Script requires a very specific format:

*   Start by declaring this bean a webscript with: webscript.
*   Next add the full Java package declaration: org.alfresco.extension.uuid
*   Followed by the name used in your FTL and XML declaration with the method used to access the web script: uuid.get
*   When packaged, the FTL and XML declaration must be in a folder structure that matches the Java package declaration.

This puts together all of the pieces on the Web Script side.  It is easiest to manage this through an [AMP file][7], which we won&amp;#8217;t discuss here how to create or install, but [code][8] and [amp file][9] are available at the project page: &amp;lt;http://code.google.com/p/alfresco-uuid-webscript/&amp;gt;

Once installed we can verify that it works by going to http://localhost:8080/alfresco/service/util/uuid in your browser (replace localhost and port as needed for your install).  What you should see returned is an XSD that looks something like this:

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;&amp;lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&amp;lt;br /&amp;gt;
xmlns:alfresco=&quot;http://www.alfresco.org/alfresco&quot;&amp;lt;br /&amp;gt;
elementFormDefault=&quot;qualified&quot;&amp;gt;&lt;/code&gt;
&lt;/p&gt;

`&lt;/p&gt;
&lt;p style=&quot;padding-left: 60px&quot;&gt;&lt;xs:complextype name=&quot;uuid&quot;&gt;
&lt;p style=&quot;padding-left: 90px&quot;&gt;&lt;xs:sequence&gt;
&lt;p style=&quot;padding-left: 120px&quot;&gt;&lt;xs:element name=&quot;uuid&quot; fixed=&quot;9c2fce39-3351-47c9-bb05-4b002967a00d&quot; type=&quot;xs:normalizedString&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 90px&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 60px&quot;&gt;&lt;/p&gt;
&lt;p&gt;`

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;&amp;lt;/xs:schema&amp;gt;&lt;/code&gt;
&lt;/p&gt;

It is our template but with are declaration of ${uuid} replaced with aUUID: 9c2fce39-3351-47c9-bb05-4b002967a00d.  With each call to this  Web Script you will see a uniquely generated ID.

Now let&amp;#8217;s integrate this with a simple XSD:

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;xs:schema&amp;lt;br /&amp;gt;
xmlns:alf=&quot;http://www.alfresco.org&quot;&amp;lt;br /&amp;gt;
xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&amp;lt;br /&amp;gt;
xmlns:sample=&quot;http://www.alfresco.org/alfresco/sample&quot;&amp;lt;br /&amp;gt;
elementFormDefault=&quot;qualified&quot;&amp;lt;br /&amp;gt;
targetNamespace=&quot;http://www.alfresco.org/alfresco/sample&quot;&amp;gt; &lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;&amp;lt;xs:include schemaLocation=&quot;webscript://util/uuid&quot; /&amp;gt;&lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt; &lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;code&gt;&amp;lt;xs:element name=&quot;sample&quot;&amp;gt;&lt;/code&gt;
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;p&gt;
    &lt;code&gt;&amp;lt;/p&amp;gt;
&amp;lt;p style=&quot;padding-left: 30px&quot;&amp;gt;&amp;lt;xs:complexType&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p style=&quot;padding-left: 60px&quot;&amp;gt;&amp;lt;xs:sequence&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p style=&quot;padding-left: 90px&quot;&amp;gt;&amp;lt;xs:element name=&quot;sample&quot; type=&quot;xs:normalizedString&quot; minOccurs=&quot;1&quot; maxOccurs=&quot;1&quot;/&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;xs:element name=&quot;key&quot; type=&quot;sample:uuid&quot;/&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p style=&quot;padding-left: 60px&quot;&amp;gt;&amp;lt;/xs:sequence&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p style=&quot;padding-left: 30px&quot;&amp;gt;&amp;lt;/xs:complexType&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p style=&quot;padding-left: 30px&quot;&amp;gt;&amp;lt;/xs:element&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&lt;/code&gt;
  &lt;/p&gt;
  
  &lt;p style=&quot;padding-left: 30px&quot;&gt;
    &lt;code&gt;&amp;lt;/xs:schema&amp;gt;&lt;/code&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    The important thing here is how we reference the Web Script, and you can do this with any custom Web Script designed to render XML Schema to be included in a form,  by referencing the call with the declaration of webscript:
  &lt;/p&gt;
  
  &lt;p style=&quot;padding-left: 30px&quot;&gt;
    &lt;code&gt;&amp;lt;xs:include schemaLocation=&quot;webscript://util/uuid&quot; /&amp;gt;&lt;/code&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    Add this XSD to your Web Project and give it a run! In the form you will see the UUID, as a read-only field.
  &lt;/p&gt;
  
  &lt;p style=&quot;text-align: center&quot;&gt;
    &lt;img class=&quot;size-full wp-image-299 aligncenter&quot; src=&quot;http://jared.ottleys.net/files/2010/02/Picture-1.png&quot; alt=&quot;UUID in Web Form&quot; width=&quot;472&quot; height=&quot;128&quot; /&gt;
  &lt;/p&gt;
  
  &lt;p style=&quot;text-align: left&quot;&gt;
    Now in your XML output you will have a unique key that you can reference in your templates.
  &lt;/p&gt;

 [1]: http://en.wikipedia.org/wiki/Universally_Unique_Identifier
 [2]: http://wiki.alfresco.com/wiki/Forms_Authoring_Guide
 [3]: http://wiki.alfresco.com/wiki/Web_Scripts#Java-Backed_Implementations
 [4]: http://wiki.alfresco.com/wiki/Web_Scripts
 [5]: http://dev.alfresco.com/resource/docs/java/web-client/org/alfresco/web/scripts/DeclarativeWebScript.html
 [6]: http://freemarker.org/
 [7]: http://wiki.alfresco.com/wiki/AMP_Files
 [8]: http://code.google.com/p/alfresco-uuid-webscript/source/checkout
 [9]: http://alfresco-uuid-webscript.googlecode.com/files/alfresco-uuid-webscript.amp
&lt;/p&gt;&lt;/p&gt;&lt;/xs:sequence&gt;&lt;/p&gt;&lt;/xs:complextype&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://jared.ottleys.net/alfresco/alfresco-wcm-forms-unique-identifier&quot;&gt;Alfresco WCM Forms: Unique Identifier&lt;/a&gt; was originally published by Jared Ottley at &lt;a href=&quot;http://jared.ottleys.net&quot;&gt;I exist as I am&lt;/a&gt; on February 24, 2010.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Tunneling Debug and JMX for Alfresco]]></title>
  <link rel="alternate" type="text/html" href="http://jared.ottleys.net/alfresco/tunneling-debug-and-jmx-for-alfresco" />
  <id>http://jared.ottleys.net/alfresco/tunneling-debug-and-jmx-for-alfresco</id>
  <published>2010-02-16T00:00:00-07:00</published>
  <updated>2010-02-16T00:00:00-07:00</updated>
  <author>
    <name>Jared Ottley</name>
    <uri>http://jared.ottleys.net</uri>
    <email>jared@ottleys.net</email>
  </author>
  <content type="html">&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; As of 3.2 sp1 the custom-core-services-context.xml is no longer needed.  Check this [updated post][1] for more info.  You will also find supplementary instructions on using Windows there.&lt;/p&gt;

&lt;p&gt;As we start to see more deployments of Alfresco in the cloud we are also seeing increased complexity in using features like JMX for managing Alfresco and troubleshooting Alfresco customizations with a Java debugger.  Below are two ways that you can use to enable both on cloud based installs of Alfresco.  These methods can also be used in instances where more security conscious admins have locked down ports, for example in a secured environment.  Also note these methods require an ssh client on your client machine and an ssh daemon on the server.  The instructions provided below assume you are using Linux on the server (which is likely to be the case for most cloud based installs); your client may run Windows, OS X or Linux.  Windows clients will require using ssh clients as provided by [cygwin][2] or [Putty][3], etc. Cygwin will allow you to use the following as described.  For putty, use this description of [tunneling with putty][4] along with the configuration instructions that follow.&lt;/p&gt;

&lt;h2 id=&quot;ssh-tunneling-for-debugging&quot;&gt;SSH Tunneling for Debugging&lt;/h2&gt;

&lt;p&gt;First configure Alfresco/Tomcat to listen for debug connections as per usual.  Add the following to your &lt;code&gt;alfresco.sh&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;export JAVA_OPTS=&quot;${JAVA_OPTS} -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8082&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;address&lt;/code&gt; parameter sets the port you want the debugger to listen on.  Adding this line, will require you to restart Alfresco/tomcat for it to become active.&lt;/p&gt;

&lt;p&gt;Next, standard port forwarding with ssh should enable Java debugging:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssh -i path/to/your.pem -f root@yourhost.com -L 2000:localhost:8082 -N&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this example we are using the following options:&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;strong&gt;&lt;code&gt;-i path/to/your.pem&lt;/code&gt;&lt;/strong&gt; If you are using key-based authentication, like with EC2, use this option to point to your private key.  It is optional if you are not.
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;strong&gt;&lt;code&gt;-f&lt;/code&gt; &lt;/strong&gt;Have the session move into the background after you connect.  Useful if you need to enter a password or passphrase
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;strong&gt;&lt;code&gt;root@yourhost.com&lt;/code&gt;&lt;/strong&gt; The user and name of the server to connect to.  You do not need to use your root user account.
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;strong&gt;&lt;code&gt;-L 2000:localhost:8082&lt;/code&gt;&lt;/strong&gt; The first number is the local port that you want to open to listen to connections on. Next is the hostname/IP/DNS name of the server to connect to on the other side of the tunnel and then finally the port to connect to at that address.
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px&quot;&gt;
  &lt;strong&gt;&lt;code&gt;-N&lt;/code&gt;&lt;/strong&gt; tells ssh to not execute a command upon connection
&lt;/p&gt;

&lt;p&gt;Next we need to connect the debugger.  This example gives instructions for Eclipse.  Configure the debugger using the Remote Java Application option. Accept the default Connection Type: &lt;code&gt;Standard (Socket Attach)&lt;/code&gt;, but for the Connection Properties enter &lt;code&gt;localhost&lt;/code&gt; for the Host and the port number from the first parameter in the &lt;code&gt;-L&lt;/code&gt; switch for Port.  In our example port &lt;code&gt;2000&lt;/code&gt;.&lt;/p&gt;

&lt;div id=&quot;attachment_276&quot; style=&quot;width: 387px&quot; class=&quot;wp-caption aligncenter&quot;&gt;
  &lt;img class=&quot;size-full wp-image-276 &quot; src=&quot;http://jared.ottleys.net/files/2010/02/dhnsnn76_21dt9jhkc7_b.png&quot; alt=&quot;Eclipse Debugger&quot; width=&quot;377&quot; height=&quot;170&quot; /&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;
    Eclipse Debugger
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Connect your debugger.&lt;/p&gt;

&lt;h2 id=&quot;ssh-tunneling-for-jmx&quot;&gt;SSH Tunneling for JMX&lt;/h2&gt;

&lt;p&gt;This configuration is a bit more complex due to how RMI works.&lt;/p&gt;

&lt;p&gt;First, you will need to add the following line to your &lt;code&gt;alfresco.sh&lt;/code&gt; file (Restart required to turn in on):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;export JAVA_OPTS=&quot;${JAVA_OPTS} -Dcom.sun.management.jmxremote=true -Djava.rmi.server.hostname=dummyhost&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You may already see the &lt;code&gt;-Dcom.sun.management.jmxremote&lt;/code&gt; line in the file, if so just add &lt;code&gt;=true&lt;/code&gt; to it.  This is important as I’ve had difficulty attaching with out this set to true (even though the default value of that option, with out declaring the value is true).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;-Djava.rmi.server.hostname=dummyhost&lt;/code&gt; option is needed to help RMI know where to connect.  RMI connects in a two part process.  First by connecting to the RMI server registry, which pushes your request to the JMX service which is dynamically allocated on the first open port available to it at start up time. Dynamic ports don’t give us the consistence we need so we will want to configure Alfresco to use a static port. Also, this second connection requires us to use/set a hostname to connect, otherwise it will return an IP address, which in the case of EC2 is non-routable.&lt;/p&gt;

&lt;p&gt;Let’s create a new context file under the &lt;code&gt;extension&lt;/code&gt; directory (&lt;code&gt;tomcat/shared/classes/alfresco/extension&lt;/code&gt;) and call it &lt;code&gt;custom-core-services-context.xml&lt;/code&gt;.  In that file we will add the following:&lt;/p&gt;

&lt;p&gt;`&lt;?xml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39;?&gt;&lt;br /&gt;
&amp;lt;!DOCTYPE beans PUBLIC ‘-//SPRING//DTD BEAN//EN’ ‘http://www.springframework.org/dtd/spring-beans.dtd’&amp;gt;&amp;lt;/p&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;beans&gt;
&lt;p&gt;&lt;!-- MBeanServer Connector Override (registers itself with custom alfrescoMBeanServer) --&gt;&lt;br /&gt;
&amp;lt;bean id=&quot;serverConnector&quot;&lt;br /&gt;
depends-on=&quot;registry&quot;&lt;br /&gt;
lazy-init=&quot;true&quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;property name=&quot;server&quot; ref=&quot;alfrescoMBeanServer&quot; /&gt;&lt;br /&gt;
&amp;lt;property name=&quot;objectName&quot;  value=&quot;connector:name=rmi&quot;/&amp;gt;&lt;br /&gt;
&amp;lt;property name=&quot;serviceUrl&quot;  value=&quot;service:jmx:rmi://localhost:${jmx.port.number}/jndi/rmi://localhost:${alfresco.rmi.services.port}/alfresco/jmxrmi&quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;property name=&quot;environment&quot;&gt;&lt;br /&gt;
&lt;map&gt;&lt;br /&gt;
&lt;!-- The following keys are only valid when sun jmx is used --&gt;&lt;br /&gt;
&lt;entry key=&quot;jmx.remote.x.password.file&quot; value=&quot;${alfresco.jmx.dir}/alfresco-jmxrmi.password&quot; /&gt;&lt;br /&gt;
&amp;lt;entry key=&quot;jmx.remote.x.access.file&quot;   value=&quot;${alfresco.jmx.dir}/alfresco-jmxrmi.access&quot;/&amp;gt;&lt;br /&gt;
&lt;/map&gt;&lt;br /&gt;
&lt;/property&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;`

The important value in here is `jmx.port.number`.  To set this value add `jmx.port.number=50508` to the `alfresco-global.properties` file (located in `tomcat/shared/classes`)

Next you will want to add the hostname you entered above into your `/etc/hosts file`:

`127.0.0.1    dummyhost`

Remember we do this because during the second part of establishing an RMI connection, RMI returns the hostname we want to connect to.  In our case this is the local client that is forwarding the connection to the server machine that is running Alfresco.

Now start Alfresco and let&amp;#8217;s configure ssh to forward the ports.  This requires two new tunnels:

`ssh -i path/to/your.pem -f root@yourhost.com -L 2001:localhost:50500 -N`

`ssh -i path/to/your.pem -f root@yourhost.com -L dummyhost:50508:localhost:50508 -N`

The same explanations to these commands found in the debug section above apply here as well.  But notice one difference in the second tunnel.  The second tunnel is specifying the hostname to connect to: `dummyhost`.  Remember we are doing this because RMI will be returning the hostname as specified in our `alfresco.sh` file.  We need to tell the tunnel how to use that hostname.  Also, the port we want to have listening locally is the same as the port that will be listening remotely.

Finally, when you connect your JMX console to Alfresco use the standard connection string but for the hostname use `localhost` and the port number, `2001`, specified in the first tunnel:

`service:jmx:rmi:///jndi/rmi://localhost:2001/alfresco/jmxrmi`

 [1]: http://jared.ottleys.net/alfresco/updated-tunneling-debug-and-jmx-for-alfresco
 [2]: http://www.cygwin.com/
 [3]: http://www.chiark.greenend.org.uk/~sgtatham/putty/
 [4]: http://www.cs.uu.nl/technical/services/ssh/putty/puttyfw.html
&lt;/p&gt;&lt;/beans&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://jared.ottleys.net/alfresco/tunneling-debug-and-jmx-for-alfresco&quot;&gt;Tunneling Debug and JMX for Alfresco&lt;/a&gt; was originally published by Jared Ottley at &lt;a href=&quot;http://jared.ottleys.net&quot;&gt;I exist as I am&lt;/a&gt; on February 16, 2010.&lt;/p&gt;</content>
</entry>

</feed>